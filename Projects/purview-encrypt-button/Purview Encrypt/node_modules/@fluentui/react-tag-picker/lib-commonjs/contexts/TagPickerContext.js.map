{"version":3,"sources":["../src/contexts/TagPickerContext.ts"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { ContextSelector, createContext, useContextSelector } from '@fluentui/react-context-selector';\nimport type { TagPickerSize } from '../components/TagPicker/TagPicker.types';\nimport { ComboboxBaseState } from '@fluentui/react-combobox';\n\nexport interface TagPickerContextValue\n  extends Pick<\n    ComboboxBaseState,\n    | 'open'\n    | 'clearSelection'\n    | 'getOptionById'\n    | 'selectedOptions'\n    | 'selectOption'\n    | 'setHasFocus'\n    | 'setOpen'\n    | 'setValue'\n    | 'value'\n    | 'appearance'\n    | 'disabled'\n  > {\n  triggerRef: React.RefObject<HTMLInputElement | HTMLButtonElement | null>;\n  popoverRef: React.RefObject<HTMLDivElement | null>;\n  popoverId: string;\n  targetRef: React.RefObject<HTMLDivElement | null>;\n  secondaryActionRef: React.RefObject<HTMLSpanElement | null>;\n  tagPickerGroupRef: React.RefObject<HTMLDivElement | null>;\n  size: TagPickerSize;\n  noPopover?: boolean;\n}\n\n/**\n * @internal\n */\nexport const tagPickerContextDefaultValue: TagPickerContextValue = {\n  triggerRef: React.createRef<HTMLInputElement>(),\n  popoverRef: React.createRef<HTMLDivElement>(),\n  targetRef: React.createRef<HTMLDivElement>(),\n  tagPickerGroupRef: React.createRef<HTMLDivElement>(),\n  secondaryActionRef: React.createRef<HTMLDivElement>(),\n  open: false,\n  clearSelection: () => null,\n  getOptionById: () => undefined,\n  selectedOptions: [],\n  selectOption: () => null,\n  setHasFocus: () => null,\n  setOpen: () => null,\n  setValue: () => null,\n  value: undefined,\n  popoverId: '',\n  size: 'medium',\n  appearance: 'outline',\n  disabled: false,\n};\n\nconst TagPickerContext = createContext<TagPickerContextValue | undefined>(undefined);\n\nexport const TagPickerContextProvider = TagPickerContext.Provider;\nexport const useTagPickerContext_unstable = <T>(selector: ContextSelector<TagPickerContextValue, T>): T =>\n  useContextSelector(TagPickerContext, (ctx = tagPickerContextDefaultValue) => selector(ctx));\n"],"names":["React","createContext","useContextSelector","tagPickerContextDefaultValue","triggerRef","createRef","popoverRef","targetRef","tagPickerGroupRef","secondaryActionRef","open","clearSelection","getOptionById","undefined","selectedOptions","selectOption","setHasFocus","setOpen","setValue","value","popoverId","size","appearance","disabled","TagPickerContext","TagPickerContextProvider","Provider","useTagPickerContext_unstable","selector","ctx"],"mappings":"AAAA;;;;;;;;;;;;4BA0DayB;;;gCAvBAtB;;;gCAwBAwB;;;;;iEAzDU,QAAQ;sCACoC,mCAAmC;AAgC/F,MAAMxB,+BAAsD;IACjEC,0BAAYJ,OAAMK,SAAS;IAC3BC,0BAAYN,OAAMK,SAAS;IAC3BE,yBAAWP,OAAMK,SAAS;IAC1BG,iCAAmBR,OAAMK,SAAS;IAClCI,kCAAoBT,OAAMK,SAAS;IACnCK,MAAM;IACNC,gBAAgB,IAAM;IACtBC,eAAe,IAAMC;IACrBC,iBAAiB,EAAE;IACnBC,cAAc,IAAM;IACpBC,aAAa,IAAM;IACnBC,SAAS,IAAM;IACfC,UAAU,IAAM;IAChBC,OAAON;IACPO,WAAW;IACXC,MAAM;IACNC,YAAY;IACZC,UAAU;AACZ,EAAE;AAEF,MAAMC,uBAAmBvB,mCAAAA,EAAiDY;AAEnE,MAAMY,2BAA2BD,iBAAiBE,QAAQ,CAAC;AAC3D,MAAMC,+BAA+B,CAAIC,eAC9C1B,wCAAAA,EAAmBsB,kBAAkB,CAACK,MAAM1B,4BAA4B,GAAKyB,SAASC,MAAM"}