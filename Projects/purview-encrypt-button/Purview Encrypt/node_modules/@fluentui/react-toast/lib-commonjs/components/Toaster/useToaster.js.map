{"version":3,"sources":["../src/components/Toaster/useToaster.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport {\n  ExtractSlotProps,\n  Slot,\n  getIntrinsicElementProps,\n  useEventCallback,\n  useMergedRefs,\n  slot,\n} from '@fluentui/react-utilities';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { useFocusableGroup } from '@fluentui/react-tabster';\nimport { Escape } from '@fluentui/keyboard-keys';\nimport type { ToasterProps, ToasterState } from './Toaster.types';\nimport { TOAST_POSITIONS, ToastPosition, useToaster } from '../../state';\nimport { Announce } from '../AriaLive';\nimport { ToastContainer } from '../ToastContainer';\nimport { useToasterFocusManagement_unstable } from './useToasterFocusManagement';\nimport { useToastAnnounce } from './useToastAnnounce';\n\n/**\n * Create the state required to render Toaster.\n *\n * @param props - props from this instance of Toaster\n */\nexport const useToaster_unstable = (props: ToasterProps): ToasterState => {\n  'use no memo';\n\n  const { offset, announce: announceProp, mountNode, inline = false, ...rest } = props;\n  const announceRef = React.useRef<Announce>(() => null);\n  const { toastsToRender, isToastVisible, pauseAllToasts, playAllToasts, tryRestoreFocus, closeAllToasts } =\n    useToaster<HTMLDivElement>(rest);\n  const announce = React.useCallback<Announce>((message, options) => announceRef.current(message, options), []);\n  const { dir } = useFluent();\n\n  const { onKeyDown: onKeyDownProp, ...rootProps } = slot.always(\n    getIntrinsicElementProps<ExtractSlotProps<Slot<'div'>>>('div', rest),\n    {\n      elementType: 'div',\n    },\n  );\n  const focusableGroupAttr = useFocusableGroup({\n    tabBehavior: 'limited-trap-focus',\n    ignoreDefaultKeydown: { Escape: true },\n  });\n  const onKeyDown = useEventCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === Escape) {\n      e.preventDefault();\n      closeAllToasts();\n    }\n    onKeyDownProp?.(e);\n  });\n  const usePositionSlot = (toastPosition: ToastPosition) => {\n    const focusManagementRef = useToasterFocusManagement_unstable(pauseAllToasts, playAllToasts);\n    const { announceToast, toasterRef } = useToastAnnounce(announceProp ?? announce);\n    return slot.optional<ExtractSlotProps<Slot<'div'>>>(toastsToRender.has(toastPosition) ? rootProps : null, {\n      defaultProps: {\n        ref: useMergedRefs(focusManagementRef, toasterRef),\n        children: toastsToRender.get(toastPosition)?.map(toast => (\n          <ToastContainer\n            {...toast}\n            tryRestoreFocus={tryRestoreFocus}\n            intent={toast.intent}\n            announce={announceToast}\n            key={toast.toastId}\n            visible={isToastVisible(toast.toastId)}\n          >\n            {toast.content as React.ReactNode}\n          </ToastContainer>\n        )),\n        onKeyDown,\n        ...focusableGroupAttr,\n        'data-toaster-position': toastPosition,\n        role: 'list',\n        // Explicitly casting because our slot types can't handle data attributes\n      } as ExtractSlotProps<Slot<'div'>>,\n      elementType: 'div',\n    });\n  };\n\n  return {\n    dir,\n    mountNode,\n    components: {\n      root: 'div',\n      bottomStart: 'div',\n      bottomEnd: 'div',\n      topStart: 'div',\n      topEnd: 'div',\n      top: 'div',\n      bottom: 'div',\n    },\n    root: slot.always(rootProps, { elementType: 'div' }),\n    bottomStart: usePositionSlot(TOAST_POSITIONS.bottomStart),\n    bottomEnd: usePositionSlot(TOAST_POSITIONS.bottomEnd),\n    topStart: usePositionSlot(TOAST_POSITIONS.topStart),\n    topEnd: usePositionSlot(TOAST_POSITIONS.topEnd),\n    top: usePositionSlot(TOAST_POSITIONS.top),\n    bottom: usePositionSlot(TOAST_POSITIONS.bottom),\n    announceRef,\n    offset,\n    announce: announceProp ?? announce,\n    renderAriaLive: !announceProp,\n    inline,\n  };\n};\n"],"names":["React","getIntrinsicElementProps","useEventCallback","useMergedRefs","slot","useFluent_unstable","useFluent","useFocusableGroup","Escape","TOAST_POSITIONS","useToaster","ToastContainer","useToasterFocusManagement_unstable","useToastAnnounce","useToaster_unstable","props","offset","announce","announceProp","mountNode","inline","rest","announceRef","useRef","toastsToRender","isToastVisible","pauseAllToasts","playAllToasts","tryRestoreFocus","closeAllToasts","useCallback","message","options","current","dir","onKeyDown","onKeyDownProp","rootProps","always","elementType","focusableGroupAttr","tabBehavior","ignoreDefaultKeydown","e","key","preventDefault","usePositionSlot","toastPosition","focusManagementRef","announceToast","toasterRef","optional","has","defaultProps","ref","children","get","map","toast","intent","toastId","visible","content","role","components","root","bottomStart","bottomEnd","topStart","topEnd","top","bottom","renderAriaLive"],"mappings":"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"}