{"version":3,"sources":["../src/components/useEmblaCarousel.ts"],"sourcesContent":["'use client';\n\nimport { type EventHandler, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport EmblaCarousel, { EmblaPluginType, type EmblaCarouselType, type EmblaOptionsType } from 'embla-carousel';\nimport * as React from 'react';\n\nimport { carouselCardClassNames } from './CarouselCard/useCarouselCardStyles.styles';\nimport { carouselSliderClassNames } from './CarouselSlider/useCarouselSliderStyles.styles';\nimport { CarouselMotion, CarouselUpdateData, CarouselVisibilityEventDetail } from '../Carousel';\nimport Autoplay from 'embla-carousel-autoplay';\nimport Fade from 'embla-carousel-fade';\nimport { pointerEventPlugin } from './pointerEvents';\nimport type { CarouselIndexChangeData } from './CarouselContext.types';\n\ntype EmblaEventHandler = Parameters<EmblaCarouselType['on']>[1];\n\nconst sliderClassname = `.${carouselSliderClassNames.root}`;\n\nconst DEFAULT_EMBLA_OPTIONS: EmblaOptionsType = {\n  containScroll: 'trimSnaps',\n  inViewThreshold: 0.99,\n  watchDrag: false,\n  skipSnaps: true,\n\n  container: sliderClassname,\n  slides: `.${carouselCardClassNames.root}`,\n};\n\nexport const EMBLA_VISIBILITY_EVENT = 'embla:visibilitychange';\n\nexport function setTabsterDefault(element: Element, isDefault: boolean): void {\n  const tabsterAttr = element.getAttribute('data-tabster');\n\n  if (tabsterAttr) {\n    const tabsterAttributes = JSON.parse(tabsterAttr);\n    if (tabsterAttributes.focusable) {\n      // If tabster.focusable isn't present, we will ignore.\n      tabsterAttributes.focusable.isDefault = isDefault;\n      element.setAttribute('data-tabster', JSON.stringify(tabsterAttributes));\n    }\n  }\n}\n\nexport function useEmblaCarousel(\n  options: Pick<EmblaOptionsType, 'align' | 'direction' | 'loop' | 'slidesToScroll' | 'watchDrag' | 'containScroll'> & {\n    defaultActiveIndex: number | undefined;\n    activeIndex: number | undefined;\n    motion?: CarouselMotion;\n    onDragIndexChange?: EventHandler<CarouselIndexChangeData>;\n    onAutoplayIndexChange?: EventHandler<CarouselIndexChangeData>;\n    autoplayInterval?: number;\n  },\n): {\n  activeIndex: number;\n  carouselApi: {\n    scrollToElement: (element: HTMLElement, jump?: boolean) => number;\n    scrollToIndex: (index: number, jump?: boolean) => void;\n    scrollInDirection: (dir: 'prev' | 'next') => number;\n  };\n  viewportRef: React.RefObject<HTMLDivElement | null>;\n  containerRef: React.RefObject<HTMLDivElement | null>;\n  subscribeForValues: (listener: (data: CarouselUpdateData) => void) => () => void;\n  enableAutoplay: (autoplay: boolean, temporary?: boolean) => void;\n  resetAutoplay: () => void;\n} {\n  const {\n    align,\n    autoplayInterval,\n    direction,\n    loop,\n    slidesToScroll,\n    watchDrag,\n    containScroll,\n    motion,\n    onDragIndexChange,\n    onAutoplayIndexChange,\n  } = options;\n\n  const motionType = typeof motion === 'string' ? motion : motion?.kind ?? 'slide';\n  const motionDuration = typeof motion === 'string' ? 25 : motion?.duration ?? 25;\n\n  const [activeIndex, setActiveIndex] = useControllableState({\n    defaultState: options.defaultActiveIndex,\n    state: options.activeIndex,\n    initialState: 0,\n  });\n\n  const onDragEvent = useEventCallback((event: PointerEvent | MouseEvent, index: number) => {\n    onDragIndexChange?.(event, { event, type: 'drag', index });\n  });\n\n  const emblaOptions = React.useRef<EmblaOptionsType>({\n    align,\n    direction,\n    loop,\n    slidesToScroll,\n    startIndex: activeIndex,\n    watchDrag,\n    containScroll,\n    duration: motionDuration,\n  });\n\n  const emblaApi = React.useRef<EmblaCarouselType | null>(null);\n  const autoplayRef = React.useRef<boolean>(false);\n\n  const resetAutoplay = React.useCallback(() => {\n    emblaApi.current?.plugins().autoplay?.reset();\n  }, []);\n\n  const getPlugins = React.useCallback(() => {\n    const plugins: EmblaPluginType[] = [];\n\n    plugins.push(\n      Autoplay({\n        playOnInit: autoplayRef.current,\n        delay: autoplayInterval,\n        /* stopOnInteraction: false causes autoplay to restart on interaction end*/\n        /* we'll handle this logic to ensure autoplay state is respected */\n        stopOnInteraction: true,\n        stopOnFocusIn: false, // We'll handle this one manually to prevent conflicts with tabster\n        stopOnMouseEnter: false, // We will handle this manually to align functionality\n      }),\n    );\n\n    // Optionally add Fade plugin\n    if (motionType === 'fade') {\n      plugins.push(Fade());\n    }\n\n    if (watchDrag) {\n      plugins.push(\n        pointerEventPlugin({\n          onSelectViaDrag: onDragEvent,\n        }),\n      );\n    }\n\n    return plugins;\n  }, [motionType, onDragEvent, watchDrag, autoplayInterval]);\n\n  /* This function enables autoplay to pause/play without affecting underlying state\n   * Useful for pausing on focus etc. without having to reinitialize or set autoplay to off\n   */\n  const enableAutoplay = React.useCallback(\n    (autoplay: boolean, temporary?: boolean) => {\n      if (!temporary) {\n        autoplayRef.current = autoplay;\n      }\n\n      if (autoplay && autoplayRef.current) {\n        // Autoplay should only enable in the case where underlying state is true, temporary should not override\n        emblaApi.current?.plugins().autoplay?.play();\n        // Reset after play to ensure timing and any focus/mouse pause state is reset.\n        resetAutoplay();\n      } else if (!autoplay) {\n        emblaApi.current?.plugins().autoplay?.stop();\n      }\n    },\n    [resetAutoplay],\n  );\n\n  // Listeners contains callbacks for UI elements that may require state update based on embla changes\n  const listeners = React.useRef(new Set<(data: CarouselUpdateData) => void>());\n  const subscribeForValues = React.useCallback((listener: (data: CarouselUpdateData) => void) => {\n    listeners.current.add(listener);\n\n    return () => {\n      listeners.current.delete(listener);\n    };\n  }, []);\n\n  const updateIndex = () => {\n    const newIndex = emblaApi.current?.selectedScrollSnap() ?? 0;\n    const slides = emblaApi.current?.slideNodes();\n    const slideRegistry = emblaApi.current?.internalEngine().slideRegistry;\n    const actualIndex = slideRegistry?.[newIndex]?.[0] ?? 0;\n\n    // We set the first card in the current group as the default tabster index for focus capture\n    slides?.forEach((slide, slideIndex) => {\n      setTabsterDefault(slide, slideIndex === actualIndex);\n    });\n    setActiveIndex(newIndex);\n  };\n\n  const handleReinit = useEventCallback(() => {\n    const nodes: HTMLElement[] = emblaApi.current?.slideNodes() ?? [];\n    const groupIndexList: number[][] = emblaApi.current?.internalEngine().slideRegistry ?? [];\n    const navItemsCount = groupIndexList.length > 0 ? groupIndexList.length : nodes.length;\n    const canLoop = emblaApi.current?.internalEngine().slideLooper.canLoop();\n\n    const data: CarouselUpdateData = {\n      navItemsCount,\n      activeIndex: emblaApi.current?.selectedScrollSnap() ?? 0,\n      groupIndexList,\n      slideNodes: nodes,\n      canLoop,\n    };\n\n    updateIndex();\n    emblaApi.current?.scrollTo(activeIndex, false);\n    for (const listener of listeners.current) {\n      listener(data);\n    }\n  });\n\n  const handleIndexChange: EmblaEventHandler = useEventCallback((_, eventType) => {\n    const newIndex = emblaApi.current?.selectedScrollSnap() ?? 0;\n    updateIndex();\n    if (eventType === 'autoplay:select') {\n      const noopEvent = new Event('autoplay');\n      onAutoplayIndexChange?.(noopEvent, { event: noopEvent, type: 'autoplay', index: newIndex });\n    }\n  });\n\n  const viewportRef: React.RefObject<HTMLDivElement | null> = React.useRef(null);\n  const containerRef: React.RefObject<HTMLDivElement | null> = React.useMemo(() => {\n    const handleVisibilityChange = () => {\n      const cardElements = emblaApi.current?.slideNodes();\n      const visibleIndexes = emblaApi.current?.slidesInView() ?? [];\n\n      cardElements?.forEach((cardElement, index) => {\n        cardElement.dispatchEvent(\n          new CustomEvent<CarouselVisibilityEventDetail>(EMBLA_VISIBILITY_EVENT, {\n            bubbles: false,\n            detail: { isVisible: visibleIndexes.includes(index) },\n          }),\n        );\n      });\n    };\n\n    // Get plugins using autoplayRef to prevent state change recreating EmblaCarousel\n    const plugins = getPlugins();\n\n    return {\n      set current(newElement: HTMLDivElement | null) {\n        if (emblaApi.current) {\n          // Stop autoplay before reinitializing.\n          emblaApi.current.plugins?.().autoplay?.stop();\n          emblaApi.current.off('slidesInView', handleVisibilityChange);\n          emblaApi.current.off('select', handleIndexChange);\n          emblaApi.current.off('reInit', handleReinit);\n          emblaApi.current.off('autoplay:select', handleIndexChange);\n\n          emblaApi.current.destroy();\n          emblaApi.current = null;\n        }\n\n        if (newElement) {\n          const newEmblaApi = EmblaCarousel(\n            // Use direct viewport if available, else fallback to container (includes Carousel controls).\n            viewportRef.current ?? newElement,\n            {\n              ...DEFAULT_EMBLA_OPTIONS,\n              ...emblaOptions.current,\n            },\n            plugins,\n          );\n\n          newEmblaApi.on('reInit', handleReinit);\n          newEmblaApi.on('slidesInView', handleVisibilityChange);\n          newEmblaApi.on('select', handleIndexChange);\n          newEmblaApi.on('autoplay:select', handleIndexChange);\n\n          emblaApi.current = newEmblaApi;\n        }\n      },\n    };\n  }, [getPlugins, handleIndexChange, handleReinit]);\n\n  const carouselApi = React.useMemo(\n    () => ({\n      scrollToElement: (element: HTMLElement, jump?: boolean) => {\n        const cardElements = emblaApi.current?.slideNodes();\n        const groupIndexList = emblaApi.current?.internalEngine().slideRegistry ?? [];\n        const cardIndex = cardElements?.indexOf(element) ?? 0;\n        const groupIndex = groupIndexList.findIndex(group => {\n          return group.includes(cardIndex);\n        });\n        const indexFocus = groupIndex ?? cardIndex;\n        emblaApi.current?.scrollTo(indexFocus, jump);\n\n        return indexFocus;\n      },\n      scrollToIndex: (index: number, jump?: boolean) => {\n        emblaApi.current?.scrollTo(index, jump);\n      },\n      scrollInDirection: (dir: 'prev' | 'next') => {\n        if (dir === 'prev') {\n          emblaApi.current?.scrollPrev();\n        } else {\n          emblaApi.current?.scrollNext();\n        }\n\n        return emblaApi.current?.selectedScrollSnap() ?? 0;\n      },\n    }),\n    [],\n  );\n\n  React.useEffect(() => {\n    const plugins = getPlugins();\n\n    emblaOptions.current = {\n      startIndex: emblaOptions.current.startIndex,\n      align,\n      direction,\n      loop,\n      slidesToScroll,\n      watchDrag,\n      containScroll,\n      duration: motionDuration,\n    };\n\n    // Stop autoplay before reinitializing.\n    emblaApi.current?.plugins?.().autoplay?.stop();\n    emblaApi.current?.reInit(\n      {\n        ...DEFAULT_EMBLA_OPTIONS,\n        ...emblaOptions.current,\n      },\n      plugins,\n    );\n  }, [align, containScroll, direction, getPlugins, loop, slidesToScroll, watchDrag, motionDuration]);\n\n  React.useEffect(() => {\n    // Scroll to controlled values on update\n    // If active index is out of bounds, re-init will handle instead\n    const currentActiveIndex = emblaApi.current?.selectedScrollSnap() ?? 0;\n    const slideLength = emblaApi.current?.slideNodes()?.length ?? 0;\n    emblaOptions.current.startIndex = activeIndex;\n    if (activeIndex < slideLength && activeIndex !== currentActiveIndex) {\n      emblaApi.current?.scrollTo(activeIndex);\n    }\n  }, [activeIndex]);\n\n  return {\n    activeIndex,\n    carouselApi,\n    viewportRef,\n    containerRef,\n    subscribeForValues,\n    enableAutoplay,\n    resetAutoplay,\n  };\n}\n"],"names":["useControllableState","useEventCallback","EmblaCarousel","React","carouselCardClassNames","carouselSliderClassNames","Autoplay","Fade","pointerEventPlugin","sliderClassname","root","DEFAULT_EMBLA_OPTIONS","containScroll","inViewThreshold","watchDrag","skipSnaps","container","slides","EMBLA_VISIBILITY_EVENT","setTabsterDefault","element","isDefault","tabsterAttr","getAttribute","tabsterAttributes","JSON","parse","focusable","setAttribute","stringify","useEmblaCarousel","options","align","autoplayInterval","direction","loop","slidesToScroll","motion","onDragIndexChange","onAutoplayIndexChange","motionType","kind","motionDuration","duration","activeIndex","setActiveIndex","defaultState","defaultActiveIndex","state","initialState","onDragEvent","event","index","type","emblaOptions","useRef","startIndex","emblaApi","autoplayRef","resetAutoplay","useCallback","current","plugins","autoplay","reset","getPlugins","push","playOnInit","delay","stopOnInteraction","stopOnFocusIn","stopOnMouseEnter","onSelectViaDrag","enableAutoplay","temporary","play","stop","listeners","Set","subscribeForValues","listener","add","delete","updateIndex","slideRegistry","newIndex","selectedScrollSnap","slideNodes","internalEngine","actualIndex","forEach","slide","slideIndex","handleReinit","nodes","groupIndexList","navItemsCount","length","canLoop","slideLooper","data","scrollTo","handleIndexChange","_","eventType","noopEvent","Event","viewportRef","containerRef","useMemo","handleVisibilityChange","cardElements","visibleIndexes","slidesInView","cardElement","dispatchEvent","CustomEvent","bubbles","detail","isVisible","includes","newElement","off","destroy","newEmblaApi","on","carouselApi","scrollToElement","jump","cardIndex","indexOf","groupIndex","findIndex","group","indexFocus","scrollToIndex","scrollInDirection","dir","scrollPrev","scrollNext","useEffect","reInit","currentActiveIndex","slideLength"],"mappings":"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"}