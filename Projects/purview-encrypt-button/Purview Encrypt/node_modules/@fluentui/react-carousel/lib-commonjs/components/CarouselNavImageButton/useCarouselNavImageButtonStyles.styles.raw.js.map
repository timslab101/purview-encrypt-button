{"version":3,"sources":["../src/components/CarouselNavImageButton/useCarouselNavImageButtonStyles.styles.ts"],"sourcesContent":["'use client';\n\nimport { makeStyles, mergeClasses, shorthands } from '@griffel/react';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\nimport type { CarouselNavImageButtonSlots, CarouselNavImageButtonState } from './CarouselNavImageButton.types';\nimport { tokens } from '@fluentui/react-theme';\n\nexport const carouselNavImageButtonClassNames: SlotClassNames<CarouselNavImageButtonSlots> = {\n  root: 'fui-CarouselNavImageButton',\n  image: 'fui-CarouselNavImageButton__image',\n};\n\nconst imageButtonSize = 40;\nconst selectedImageButtonSize = 48;\n\n/**\n * Styles for the root slot\n */\nconst useStyles = makeStyles({\n  root: {\n    boxSizing: 'content-box',\n    padding: '0px',\n    margin: `0 ${tokens.spacingHorizontalXS}`,\n    ...shorthands.borderColor(tokens.colorTransparentStroke),\n    borderRadius: tokens.borderRadiusSmall,\n    width: imageButtonSize + 'px',\n    height: imageButtonSize + 'px',\n    overflow: 'hidden',\n    ':hover': {\n      cursor: 'pointer',\n    },\n  },\n  image: {\n    width: imageButtonSize + 'px',\n    height: imageButtonSize + 'px',\n    borderRadius: tokens.borderRadiusSmall,\n  },\n  selected: {\n    width: selectedImageButtonSize + 'px',\n    height: selectedImageButtonSize + 'px',\n  },\n});\n\n/**\n * Apply styling to the CarouselNavImageButton slots based on the state\n */\nexport const useCarouselNavImageButtonStyles_unstable = (\n  state: CarouselNavImageButtonState,\n): CarouselNavImageButtonState => {\n  'use no memo';\n\n  const { selected } = state;\n  const styles = useStyles();\n\n  state.root.className = mergeClasses(\n    carouselNavImageButtonClassNames.root,\n    styles.root,\n    selected && styles.selected,\n    state.root.className,\n  );\n\n  if (state.image) {\n    state.image.className = mergeClasses(\n      carouselNavImageButtonClassNames.image,\n      styles.image,\n      selected && styles.selected,\n      state.image?.className,\n    );\n  }\n\n  return state;\n};\n"],"names":["makeStyles","mergeClasses","shorthands","tokens","carouselNavImageButtonClassNames","root","image","imageButtonSize","selectedImageButtonSize","useStyles","boxSizing","padding","margin","spacingHorizontalXS","borderColor","colorTransparentStroke","borderRadius","borderRadiusSmall","width","height","overflow","cursor","selected","useCarouselNavImageButtonStyles_unstable","state","styles","className"],"mappings":"AAAA;;;;;;;;;;;;IAOaI,gCAAAA;;;IAuCAmB,wCAAAA;;;;uBA5CwC,iBAAiB;4BAG/C,wBAAwB;AAExC,yCAAsF;IAC3FlB,MAAM;IACNC,OAAO;AACT,EAAE;AAEF,MAAMC,kBAAkB;AACxB,MAAMC,0BAA0B;AAEhC;;CAEC,GACD,MAAMC,gBAAYT,iBAAAA,EAAW;IAC3BK,MAAM;QACJK,WAAW;QACXC,SAAS;QACTC,QAAQ,CAAC,EAAE,EAAET,kBAAAA,CAAOU,mBAAmB,EAAE;QACzC,GAAGX,iBAAAA,CAAWY,WAAW,CAACX,kBAAAA,CAAOY,sBAAsB,CAAC;QACxDC,cAAcb,kBAAAA,CAAOc,iBAAiB;QACtCC,OAAOX,kBAAkB;QACzBY,QAAQZ,kBAAkB;QAC1Ba,UAAU;QACV,UAAU;YACRC,QAAQ;QACV;IACF;IACAf,OAAO;QACLY,OAAOX,kBAAkB;QACzBY,QAAQZ,kBAAkB;QAC1BS,cAAcb,kBAAAA,CAAOc,iBAAiB;IACxC;IACAK,UAAU;QACRJ,OAAOV,0BAA0B;QACjCW,QAAQX,0BAA0B;IACpC;AACF;AAKO,iDAAiD,CACtDgB;IAEA;IAEA,MAAM,EAAEF,QAAQ,EAAE,GAAGE;IACrB,MAAMC,SAAShB;IAEfe,MAAMnB,IAAI,CAACqB,SAAS,OAAGzB,mBAAAA,EACrBG,iCAAiCC,IAAI,EACrCoB,OAAOpB,IAAI,EACXiB,YAAYG,OAAOH,QAAQ,EAC3BE,MAAMnB,IAAI,CAACqB,SAAS;IAGtB,IAAIF,MAAMlB,KAAK,EAAE;YAKbkB;QAJFA,MAAMlB,KAAK,CAACoB,SAAS,OAAGzB,mBAAAA,EACtBG,iCAAiCE,KAAK,EACtCmB,OAAOnB,KAAK,EACZgB,YAAYG,OAAOH,QAAQ,EAAA,CAC3BE,eAAAA,MAAMlB,KAAAA,AAAK,MAAA,QAAXkB,iBAAAA,KAAAA,IAAAA,KAAAA,IAAAA,aAAaE,SAAS;IAE1B;IAEA,OAAOF;AACT,EAAE"}