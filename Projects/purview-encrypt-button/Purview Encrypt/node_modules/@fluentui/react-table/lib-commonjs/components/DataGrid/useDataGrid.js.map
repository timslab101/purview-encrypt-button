{"version":3,"sources":["../src/components/DataGrid/useDataGrid.ts"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { useArrowNavigationGroup, useFocusFinders } from '@fluentui/react-tabster';\nimport type { DataGridProps, DataGridState } from './DataGrid.types';\nimport { useTable_unstable } from '../Table/useTable';\nimport { useEventCallback, useMergedRefs } from '@fluentui/react-utilities';\nimport { End, Home } from '@fluentui/keyboard-keys';\nimport {\n  useTableFeatures,\n  useTableSort,\n  useTableSelection,\n  useTableColumnSizing_unstable,\n  useTableCompositeNavigation,\n} from '../../hooks';\nimport { CELL_WIDTH } from '../TableSelectionCell';\n\n/**\n * Create the state required to render DataGrid.\n *\n * The returned state can be modified with hooks such as useDataGridStyles_unstable,\n * before being passed to renderDataGrid_unstable.\n *\n * @param props - props from this instance of DataGrid\n * @param ref - reference to root HTMLElement of DataGrid\n */\nexport const useDataGrid_unstable = (props: DataGridProps, ref: React.Ref<HTMLElement>): DataGridState => {\n  const {\n    items,\n    columns,\n    focusMode = 'cell',\n    selectionMode,\n    onSortChange,\n    onSelectionChange,\n    defaultSortState,\n    sortState,\n    selectedItems,\n    defaultSelectedItems,\n    subtleSelection = false,\n    selectionAppearance = 'brand',\n    getRowId,\n    resizableColumns,\n    columnSizingOptions,\n    onColumnResize,\n    containerWidthOffset,\n    resizableColumnsOptions = {},\n  } = props;\n\n  const widthOffset = containerWidthOffset ?? (selectionMode ? -CELL_WIDTH : 0);\n\n  const gridTabsterAttribute = useArrowNavigationGroup({\n    axis: 'grid',\n  });\n\n  const {\n    onTableKeyDown: onCompositeKeyDown,\n    tableTabsterAttribute: compositeTabsterAttribute,\n    tableRowTabsterAttribute: compositeRowTabsterAttribute,\n  } = useTableCompositeNavigation();\n\n  const tableState = useTableFeatures({ items, columns, getRowId }, [\n    useTableSort({\n      defaultSortState,\n      sortState,\n      onSortChange,\n    }),\n    useTableSelection({\n      defaultSelectedItems,\n      selectedItems,\n      onSelectionChange,\n      selectionMode: selectionMode ?? 'multiselect',\n    }),\n    useTableColumnSizing_unstable({\n      onColumnResize,\n      columnSizingOptions,\n      // The selection cell is not part of the columns, therefore its width needs to be subtracted\n      // from the container to make sure the columns don't overflow the table.\n      containerWidthOffset: widthOffset,\n      // Disables automatic resizing of columns when the container overflows.\n      // This allows the sum of the columns to be larger than the container.\n      autoFitColumns: resizableColumnsOptions.autoFitColumns ?? true,\n    }),\n  ]);\n\n  const innerRef = React.useRef<HTMLDivElement>(null);\n  const { findFirstFocusable, findLastFocusable } = useFocusFinders();\n  const onKeyDown = useEventCallback((e: React.KeyboardEvent<HTMLTableElement>) => {\n    props.onKeyDown?.(e);\n    focusMode === 'composite' && onCompositeKeyDown(e);\n\n    // handle ctrl+home and ctrl+end\n    if (!innerRef.current || !e.ctrlKey || e.defaultPrevented) {\n      return;\n    }\n\n    if (e.key === Home) {\n      const firstRow = innerRef.current.querySelector('[role=\"row\"]') as HTMLElement | null;\n      if (firstRow) {\n        findFirstFocusable(firstRow)?.focus();\n      }\n    }\n\n    if (e.key === End) {\n      const rows = innerRef.current.querySelectorAll('[role=\"row\"]');\n      if (rows.length) {\n        const lastRow = rows.item(rows.length - 1);\n        findLastFocusable(lastRow as HTMLElement)?.focus();\n      }\n    }\n  });\n\n  const baseTableState = useTable_unstable(\n    {\n      role: 'grid',\n      as: 'div',\n      noNativeElements: true,\n      ...(focusMode === 'cell' && gridTabsterAttribute),\n      ...(focusMode === 'composite' && compositeTabsterAttribute),\n      ...props,\n      onKeyDown,\n      ...(resizableColumns ? tableState.columnSizing_unstable.getTableProps(props) : {}),\n    },\n    useMergedRefs(ref, tableState.tableRef, innerRef),\n  );\n\n  return {\n    ...baseTableState,\n    focusMode,\n    tableState,\n    selectableRows: !!selectionMode,\n    subtleSelection,\n    selectionAppearance,\n    resizableColumns,\n    compositeRowTabsterAttribute,\n  };\n};\n"],"names":["React","useArrowNavigationGroup","useFocusFinders","useTable_unstable","useEventCallback","useMergedRefs","End","Home","useTableFeatures","useTableSort","useTableSelection","useTableColumnSizing_unstable","useTableCompositeNavigation","CELL_WIDTH","useDataGrid_unstable","props","ref","items","columns","focusMode","selectionMode","onSortChange","onSelectionChange","defaultSortState","sortState","selectedItems","defaultSelectedItems","subtleSelection","selectionAppearance","getRowId","resizableColumns","columnSizingOptions","onColumnResize","containerWidthOffset","resizableColumnsOptions","widthOffset","gridTabsterAttribute","axis","onTableKeyDown","onCompositeKeyDown","tableTabsterAttribute","compositeTabsterAttribute","tableRowTabsterAttribute","compositeRowTabsterAttribute","tableState","autoFitColumns","innerRef","useRef","findFirstFocusable","findLastFocusable","onKeyDown","e","current","ctrlKey","defaultPrevented","key","firstRow","querySelector","focus","rows","querySelectorAll","length","lastRow","item","baseTableState","role","as","noNativeElements","columnSizing_unstable","getTableProps","tableRef","selectableRows"],"mappings":"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"}