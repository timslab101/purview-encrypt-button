'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    teachingPopoverCarouselFooterButtonClassNames: function() {
        return teachingPopoverCarouselFooterButtonClassNames;
    },
    useTeachingPopoverCarouselFooterButtonStyles_unstable: function() {
        return useTeachingPopoverCarouselFooterButtonStyles_unstable;
    }
});
const _react = require("@griffel/react");
const _reacttheme = require("@fluentui/react-theme");
const _reactbutton = require("@fluentui/react-button");
const teachingPopoverCarouselFooterButtonClassNames = {
    root: 'fui-TeachingPopoverCarouselFooterButton'
};
const useStyles = (0, _react.makeStyles)({
    root: {
        minWidth: '96px'
    },
    brandNext: {
        color: _reacttheme.tokens.colorBrandForeground1,
        backgroundColor: _reacttheme.tokens.colorNeutralForegroundOnBrand,
        ..._react.shorthands.borderColor(_reacttheme.tokens.colorTransparentBackground),
        ':hover': {
            color: _reacttheme.tokens.colorCompoundBrandForeground1Hover,
            backgroundColor: _reacttheme.tokens.colorNeutralForegroundOnBrand
        },
        ':hover:active': {
            color: _reacttheme.tokens.colorCompoundBrandForeground1Pressed,
            backgroundColor: _reacttheme.tokens.colorNeutralForegroundOnBrand
        }
    },
    brandPrevious: {
        // In brand, this is always 'NeutralForegroundOnBrand'
        color: _reacttheme.tokens.colorNeutralForegroundOnBrand,
        backgroundColor: _reacttheme.tokens.colorBrandBackground,
        ..._react.shorthands.borderColor(_reacttheme.tokens.colorNeutralForegroundOnBrand),
        ':hover': {
            color: _reacttheme.tokens.colorNeutralForegroundOnBrand,
            ..._react.shorthands.borderColor(_reacttheme.tokens.colorNeutralForegroundOnBrand),
            backgroundColor: _reacttheme.tokens.colorBrandBackgroundHover
        },
        ':hover:active': {
            color: _reacttheme.tokens.colorNeutralForegroundOnBrand,
            ..._react.shorthands.borderColor(_reacttheme.tokens.colorNeutralForegroundOnBrand),
            backgroundColor: _reacttheme.tokens.colorBrandBackgroundPressed
        }
    }
});
const useTeachingPopoverCarouselFooterButtonStyles_unstable = (state)=>{
    'use no memo';
    const styles = useStyles();
    const { navType, popoverAppearance } = state;
    // Apply underlying fluent Button styles
    state = {
        ...state,
        ...(0, _reactbutton.useButtonStyles_unstable)(state)
    };
    state.root.className = (0, _react.mergeClasses)(teachingPopoverCarouselFooterButtonClassNames.root, styles.root, navType === 'prev' && popoverAppearance === 'brand' && styles.brandPrevious, navType === 'next' && popoverAppearance === 'brand' && styles.brandNext, state.root.className);
    return state;
};
