{"version":3,"sources":["../src/components/FluentProvider/useFluentProviderThemeStyleTag.ts"],"sourcesContent":["'use client';\n\nimport { useId, useIsomorphicLayoutEffect } from '@fluentui/react-utilities';\nimport * as React from 'react';\n\nimport { createCSSRuleFromTheme } from './createCSSRuleFromTheme';\nimport type { FluentProviderState } from './FluentProvider.types';\nimport { fluentProviderClassNames } from './useFluentProviderStyles.styles';\n\n// String concatenation is used to prevent bundlers to complain with older versions of React\nconst useInsertionEffect = (React as never)['useInsertion' + 'Effect']\n  ? (React as never)['useInsertion' + 'Effect']\n  : useIsomorphicLayoutEffect;\n\nconst createStyleTag = (target: Document | undefined, elementAttributes: Record<string, string>) => {\n  // Document might exist but not be ready yet (e.g. during SSR)\n  // In that case, we should not create a style tag\n  if (!target?.head) {\n    return undefined;\n  }\n\n  const tag = target.createElement('style');\n\n  Object.keys(elementAttributes).forEach(attrName => {\n    tag.setAttribute(attrName, elementAttributes[attrName]);\n  });\n\n  target.head.appendChild(tag);\n  return tag;\n};\n\nconst insertSheet = (tag: HTMLStyleElement, rule: string) => {\n  const sheet = tag.sheet;\n\n  if (sheet) {\n    if (sheet.cssRules.length > 0) {\n      sheet.deleteRule(0);\n    }\n    sheet.insertRule(rule, 0);\n  } else if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.error('FluentProvider: No sheet available on styleTag, styles will not be inserted into DOM.');\n  }\n};\n\n/**\n * Writes a theme as css variables in a style tag on the provided targetDocument as a rule applied to a CSS class\n * @internal\n * @returns CSS class to apply the rule\n */\nexport const useFluentProviderThemeStyleTag = (\n  options: Pick<FluentProviderState, 'theme' | 'targetDocument'> & { rendererAttributes: Record<string, string> },\n): { styleTagId: string; rule: string } => {\n  'use no memo';\n\n  const { targetDocument, theme, rendererAttributes } = options;\n\n  const styleTag = React.useRef<HTMLStyleElement | undefined | null>(undefined);\n\n  const styleTagId = useId(fluentProviderClassNames.root);\n  const styleElementAttributes = rendererAttributes;\n\n  const rule = React.useMemo(() => createCSSRuleFromTheme(`.${styleTagId}`, theme), [theme, styleTagId]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useMemo(() => {\n      // Heads up!\n      // .useMemo() is used because it is called during render and DOM for _current_ component is not mounted yet. Also,\n      // this allows to do checks with strict mode enabled as .useEffect() will be called with incremented IDs because\n      // of double render.\n\n      if (targetDocument) {\n        const providerElementSelector = `.${fluentProviderClassNames.root}.${styleTagId}`;\n        const providerElements = targetDocument.querySelectorAll(providerElementSelector);\n\n        const styleElementSelector = `style[id=\"${styleTagId}\"]`;\n        const styleElements = targetDocument.querySelectorAll<HTMLStyleElement>(styleElementSelector);\n\n        if (styleElements.length > 1) {\n          // eslint-disable-next-line no-console\n          console.error(\n            [\n              '@fluentui/react-provider: We found multiple <style> elements with same IDs in your DOM.',\n              'Please make sure that you configured your application properly.',\n              '\\n',\n              '\\n',\n              'Configuration guide: https://aka.ms/fluentui-conflicting-ids',\n            ].join(' '),\n          );\n          return;\n        }\n\n        const styleElement = styleElements.item(0) as HTMLStyleElement | null;\n\n        // Heads up!\n        //\n        // In SSR, we will have DOM upfront & style tags will have CSS rules defined in `.textContent`\n        const isSSR = (styleElement?.textContent?.length ?? 0) > 0;\n        const elementsCount = isSSR ? 1 : 0;\n\n        if (providerElements.length > elementsCount) {\n          // eslint-disable-next-line no-console\n          console.error(\n            [\n              '@fluentui/react-provider: There are conflicting ids in your DOM.',\n              'Please make sure that you configured your application properly.',\n              '\\n',\n              '\\n',\n              'Configuration guide: https://aka.ms/fluentui-conflicting-ids',\n            ].join(' '),\n          );\n        }\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n  }\n\n  useHandleSSRStyleElements(targetDocument, styleTagId);\n  useInsertionEffect(() => {\n    // The style element could already have been created during SSR - no need to recreate it\n    const ssrStyleElement = targetDocument?.getElementById(styleTagId);\n    if (ssrStyleElement) {\n      styleTag.current = ssrStyleElement as HTMLStyleElement;\n    } else {\n      styleTag.current = createStyleTag(targetDocument, { ...styleElementAttributes, id: styleTagId });\n      if (styleTag.current) {\n        insertSheet(styleTag.current, rule);\n      }\n    }\n\n    return () => {\n      styleTag.current?.remove();\n    };\n  }, [styleTagId, targetDocument, rule, styleElementAttributes]);\n\n  return { styleTagId, rule };\n};\n\nfunction useHandleSSRStyleElements(targetDocument: Document | undefined | null, styleTagId: string) {\n  // Using a state factory so that this logic only runs once per render\n  // Each FluentProvider can create its own style element during SSR as a slot\n  // Moves all theme style elements to document head during render to avoid hydration errors.\n  // Should be strict mode safe since the logic is idempotent.\n  React.useState(() => {\n    if (!targetDocument) {\n      return;\n    }\n\n    const themeStyleElement = targetDocument.getElementById(styleTagId);\n    if (themeStyleElement) {\n      targetDocument.head.append(themeStyleElement);\n    }\n  });\n}\n"],"names":["useId","useIsomorphicLayoutEffect","React","createCSSRuleFromTheme","fluentProviderClassNames","useInsertionEffect","createStyleTag","target","elementAttributes","head","undefined","tag","createElement","Object","keys","forEach","attrName","setAttribute","appendChild","insertSheet","rule","sheet","cssRules","length","deleteRule","insertRule","process","env","NODE_ENV","console","error","useFluentProviderThemeStyleTag","options","targetDocument","theme","rendererAttributes","styleTag","useRef","styleTagId","root","styleElementAttributes","useMemo","styleElement","providerElementSelector","providerElements","querySelectorAll","styleElementSelector","styleElements","join","item","isSSR","textContent","elementsCount","useHandleSSRStyleElements","ssrStyleElement","getElementById","current","id","remove","useState","themeStyleElement","append"],"mappings":"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"}