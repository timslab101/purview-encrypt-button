{"version":3,"sources":["../src/hooks/useScrollbarWidth.ts"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { measureScrollbarWidth } from '../utils/measureScrollBarWidth';\n\nconst cache = new WeakMap<Document, number>();\n\ninterface UseScrollbarWidthOptions {\n  /**\n   * Reference document to measure the scrollbar width\n   */\n  targetDocument: Document | null | undefined;\n\n  /**\n   * Does not use the cache and recalculates the scrollbar width\n   */\n  force?: boolean;\n}\n\n/**\n * @returns The width in pixels of the scrollbar in the user agent\n * @remarks This hook is not SSR-safe. For SSR-safe scrollbar width application, use the `useApplyScrollbarWidth` from {@link file://./useApplyScrollbarWidth.ts} instead.\n */\nexport function useScrollbarWidth(options: UseScrollbarWidthOptions): number | undefined {\n  const { targetDocument, force } = options;\n\n  return React.useMemo(() => {\n    if (!targetDocument) {\n      return 0;\n    }\n\n    if (!force && cache.has(targetDocument)) {\n      return cache.get(targetDocument);\n    }\n\n    const scrollbarWidth = measureScrollbarWidth(targetDocument);\n    cache.set(targetDocument, scrollbarWidth);\n\n    return scrollbarWidth;\n  }, [targetDocument, force]);\n}\n"],"names":["useScrollbarWidth","cache","WeakMap","options","targetDocument","force","React","useMemo","has","get","scrollbarWidth","measureScrollbarWidth","set"],"mappings":"AAAA;;;;;+BAuBgBA;;;eAAAA;;;;iEArBO;uCACe;AAEtC,MAAMC,QAAQ,IAAIC;AAkBX,SAASF,kBAAkBG,OAAiC;IACjE,MAAM,EAAEC,cAAc,EAAEC,KAAK,EAAE,GAAGF;IAElC,OAAOG,OAAMC,OAAO,CAAC;QACnB,IAAI,CAACH,gBAAgB;YACnB,OAAO;QACT;QAEA,IAAI,CAACC,SAASJ,MAAMO,GAAG,CAACJ,iBAAiB;YACvC,OAAOH,MAAMQ,GAAG,CAACL;QACnB;QAEA,MAAMM,iBAAiBC,IAAAA,4CAAqB,EAACP;QAC7CH,MAAMW,GAAG,CAACR,gBAAgBM;QAE1B,OAAOA;IACT,GAAG;QAACN;QAAgBC;KAAM;AAC5B"}