{"version":3,"sources":["../src/components/TreeItem/useTreeItem.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {\n  getIntrinsicElementProps,\n  useId,\n  useEventCallback,\n  slot,\n  elementContains,\n  useMergedRefs,\n  isHTMLElement,\n} from '@fluentui/react-utilities';\nimport type { TreeItemProps, TreeItemState, TreeItemValue } from './TreeItem.types';\nimport { Space } from '@fluentui/keyboard-keys';\nimport { treeDataTypes } from '../../utils/tokens';\nimport {\n  useTreeContext_unstable,\n  useSubtreeContext_unstable,\n  useTreeItemContext_unstable,\n  TreeContext,\n} from '../../contexts';\nimport { dataTreeItemValueAttrName } from '../../utils/getTreeItemValueFromElement';\nimport { useHasParentContext } from '@fluentui/react-context-selector';\nimport { treeClassNames } from '../../Tree';\n\n/**\n * Create the state required to render TreeItem.\n *\n * The returned state can be modified with hooks such as useTreeItemStyles_unstable,\n * before being passed to renderTreeItem_unstable.\n *\n * @param props - props from this instance of TreeItem\n * @param ref - reference to root HTMLElement of TreeItem\n */\nexport function useTreeItem_unstable(props: TreeItemProps, ref: React.Ref<HTMLDivElement>): TreeItemState {\n  'use no memo';\n\n  const treeType = useTreeContext_unstable(ctx => ctx.treeType);\n  if (treeType === 'flat') {\n    warnIfNoProperPropsFlatTreeItem(props);\n  }\n  const requestTreeResponse = useTreeContext_unstable(ctx => ctx.requestTreeResponse);\n  const navigationMode = useTreeContext_unstable(ctx => ctx.navigationMode ?? 'tree');\n  const forceUpdateRovingTabIndex = useTreeContext_unstable(ctx => ctx.forceUpdateRovingTabIndex);\n  const { level: contextLevel } = useSubtreeContext_unstable();\n  const parentValue = useTreeItemContext_unstable(ctx => props.parentValue ?? ctx.value);\n\n  // note, if the value is not externally provided,\n  // then selection and expansion will not work properly\n  const internalValue = useId('fuiTreeItemValue-');\n  const value: TreeItemValue = props.value ?? internalValue;\n\n  const {\n    onClick,\n    onKeyDown,\n    onChange,\n    as = 'div',\n    itemType = 'leaf',\n    'aria-level': level = contextLevel,\n    'aria-selected': ariaSelected,\n    'aria-expanded': ariaExpanded,\n    ...rest\n  } = props;\n\n  const actionsRef = React.useRef<HTMLDivElement>(null);\n  const expandIconRef = React.useRef<HTMLDivElement>(null);\n  const layoutRef = React.useRef<HTMLDivElement>(null);\n  const subtreeRef = React.useRef<HTMLDivElement>(null);\n  const selectionRef = React.useRef<HTMLInputElement>(null);\n  const treeItemRef = React.useRef<HTMLDivElement>(null);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // This is acceptable since the NODE_ENV will not change during runtime\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const hasTreeContext = useHasParentContext(TreeContext);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (hasTreeContext) {\n        return;\n      }\n\n      if (treeItemRef.current?.querySelector(`.${treeClassNames.root}`)) {\n        // eslint-disable-next-line no-console\n        console.error(/** #__DE-INDENT__ */ `\n          @fluentui/react-tree [useTreeItem]:\n          <TreeItem> should be declared inside a <Tree> component.\n        `);\n      }\n    }, [hasTreeContext]);\n  }\n\n  React.useEffect(() => {\n    // When the tree item is mounted, we might need to update the roving tab index\n    // in edge cases where the tree is empty and then populated\n    forceUpdateRovingTabIndex?.();\n    const treeItem = treeItemRef.current;\n    return () => {\n      // When the tree item is unmounted, we need to update the roving tab index\n      // if the tree item is the current tab indexed item\n      if (treeItem && treeItem.tabIndex === 0) {\n        forceUpdateRovingTabIndex?.();\n      }\n    };\n  }, [forceUpdateRovingTabIndex]);\n\n  const open = useTreeContext_unstable(ctx => props.open ?? ctx.openItems.has(value));\n  const getNextOpen = () => (itemType === 'branch' ? !open : open);\n  const selectionMode = useTreeContext_unstable(ctx => ctx.selectionMode);\n  const checked = useTreeContext_unstable(ctx => ctx.checkedItems.get(value) ?? false);\n\n  const handleClick = useEventCallback((event: React.MouseEvent<HTMLDivElement>) => {\n    const isEventFromActions = () => actionsRef.current && elementContains(actionsRef.current, event.target as Node);\n\n    const isEventFromSubtree = () => subtreeRef.current && elementContains(subtreeRef.current, event.target as Node);\n\n    const isEventFromSelection = () => selectionRef.current?.contains(event.target as Node);\n\n    const isEventFromExpandIcon = expandIconRef.current?.contains(event.target as Node);\n\n    if (isEventFromActions() || isEventFromSubtree() || isEventFromSelection()) {\n      return;\n    } else if (!isEventFromExpandIcon) {\n      onClick?.(event);\n    }\n    if (event.isDefaultPrevented()) {\n      return;\n    }\n\n    ReactDOM.unstable_batchedUpdates(() => {\n      const data = {\n        event,\n        value,\n        open: getNextOpen(),\n        target: event.currentTarget,\n        type: isEventFromExpandIcon ? treeDataTypes.ExpandIconClick : treeDataTypes.Click,\n      } as const;\n      if (itemType !== 'leaf') {\n        props.onOpenChange?.(event, data);\n        requestTreeResponse({\n          ...data,\n          itemType,\n          requestType: 'open',\n        });\n      }\n      requestTreeResponse({\n        ...data,\n        itemType,\n        parentValue,\n        requestType: 'navigate',\n        type: treeDataTypes.Click,\n      });\n    });\n  });\n\n  const handleKeyDown = useEventCallback((event: React.KeyboardEvent<HTMLDivElement>) => {\n    onKeyDown?.(event);\n    if (event.isDefaultPrevented() || !treeItemRef.current) {\n      return;\n    }\n    const isEventFromTreeItem = event.currentTarget === event.target;\n    const isEventFromActions = actionsRef.current && actionsRef.current.contains(event.target as Node);\n\n    switch (event.key) {\n      case Space: {\n        if (!isEventFromTreeItem) {\n          return;\n        }\n        if (selectionMode !== 'none') {\n          selectionRef.current?.click();\n          // Prevents the page from scrolling down when the spacebar is pressed\n          event.preventDefault();\n        }\n        return;\n      }\n      case treeDataTypes.Enter: {\n        if (!isEventFromTreeItem) {\n          return;\n        }\n        return event.currentTarget.click();\n      }\n      case treeDataTypes.End:\n      case treeDataTypes.Home:\n      case treeDataTypes.ArrowUp: {\n        if (!isEventFromTreeItem && !isEventFromActions) {\n          return;\n        }\n        return requestTreeResponse({\n          requestType: 'navigate',\n          event,\n          value,\n          itemType,\n          parentValue,\n          type: event.key,\n          target: event.currentTarget,\n        });\n      }\n      case treeDataTypes.ArrowDown: {\n        if (!isEventFromTreeItem && !isEventFromActions) {\n          return;\n        }\n        if (isEventFromActions && (!isHTMLElement(event.target) || event.target.hasAttribute('aria-haspopup'))) {\n          return;\n        }\n        return requestTreeResponse({\n          requestType: 'navigate',\n          event,\n          value,\n          itemType,\n          parentValue,\n          type: event.key,\n          target: event.currentTarget,\n        });\n      }\n      case treeDataTypes.ArrowLeft: {\n        // arrow left with alt key is reserved for history navigation\n        if (event.altKey) {\n          return;\n        }\n        const data = {\n          value,\n          event,\n          open: getNextOpen(),\n          type: event.key,\n          itemType,\n          parentValue,\n          target: event.currentTarget,\n        } as const;\n\n        if (isEventFromActions && navigationMode === 'treegrid') {\n          requestTreeResponse({ ...data, requestType: 'navigate' });\n          return;\n        }\n        if (!isEventFromTreeItem) {\n          return;\n        }\n        // do not navigate to parent if the item is on the top level\n        if (level === 1 && !open) {\n          return;\n        }\n        if (open) {\n          props.onOpenChange?.(event, data);\n        }\n        requestTreeResponse({ ...data, requestType: open ? 'open' : 'navigate' });\n        return;\n      }\n      case treeDataTypes.ArrowRight: {\n        // Ignore keyboard events that do not originate from the current tree item.\n        if (!isEventFromTreeItem) {\n          return;\n        }\n        // arrow right with alt key is reserved for history navigation\n        if (event.altKey) {\n          return;\n        }\n        const data = {\n          value,\n          event,\n          open: getNextOpen(),\n          type: event.key,\n          target: event.currentTarget,\n        } as const;\n\n        if (itemType === 'branch' && !open) {\n          props.onOpenChange?.(event, data);\n          requestTreeResponse({ ...data, itemType, requestType: 'open' });\n        } else {\n          requestTreeResponse({ ...data, itemType, parentValue, requestType: 'navigate' });\n        }\n        return;\n      }\n    }\n    // Ignore keyboard events that do not originate from the current tree item.\n    if (!isEventFromTreeItem) {\n      return;\n    }\n    const isTypeAheadCharacter =\n      event.key.length === 1 && event.key.match(/\\w/) && !event.altKey && !event.ctrlKey && !event.metaKey;\n    if (isTypeAheadCharacter) {\n      requestTreeResponse({\n        requestType: 'navigate',\n        event,\n        target: event.currentTarget,\n        value,\n        itemType,\n        type: treeDataTypes.TypeAhead,\n        parentValue,\n      });\n    }\n  });\n\n  const handleChange = useEventCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange?.(event);\n    if (event.isDefaultPrevented()) {\n      return;\n    }\n    const isEventFromSubtree = subtreeRef.current && elementContains(subtreeRef.current, event.target as Node);\n    if (isEventFromSubtree) {\n      return;\n    }\n    requestTreeResponse({\n      requestType: 'selection',\n      event,\n      value,\n      itemType,\n      type: 'Change',\n      target: event.currentTarget,\n      checked: checked === 'mixed' ? true : !checked,\n    });\n  });\n\n  return {\n    value,\n    open,\n    checked,\n    subtreeRef,\n    layoutRef,\n    selectionRef,\n    expandIconRef,\n    treeItemRef,\n    actionsRef,\n    itemType,\n    level,\n    components: {\n      root: 'div',\n    },\n    // FIXME: this property is not necessary anymore, but as removing it would be a breaking change, we need to keep it as false\n    isAsideVisible: false,\n    // FIXME: this property is not necessary anymore, but as removing it would be a breaking change, we need to keep it as false\n    isActionsVisible: false,\n    root: slot.always(\n      getIntrinsicElementProps(as, {\n        tabIndex: -1,\n        [dataTreeItemValueAttrName]: value,\n        role: 'treeitem',\n        ...rest,\n        ref: useMergedRefs(ref, treeItemRef),\n        'aria-level': level,\n        'aria-checked': selectionMode === 'multiselect' ? checked : undefined,\n        'aria-selected': ariaSelected !== undefined ? ariaSelected : selectionMode === 'single' ? !!checked : undefined,\n        'aria-expanded': ariaExpanded !== undefined ? ariaExpanded : itemType === 'branch' ? open : undefined,\n        onClick: handleClick,\n        onKeyDown: handleKeyDown,\n        onChange: handleChange,\n      } as const),\n      { elementType: 'div' },\n    ),\n  };\n}\n\nfunction warnIfNoProperPropsFlatTreeItem(\n  props: Pick<TreeItemProps, 'aria-setsize' | 'aria-posinset' | 'aria-level' | 'parentValue'>,\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (\n      props['aria-posinset'] === undefined ||\n      props['aria-setsize'] === undefined ||\n      props['aria-level'] === undefined ||\n      (props.parentValue === undefined && props['aria-level'] !== 1)\n    ) {\n      // eslint-disable-next-line no-console\n      console.error(/** #__DE-INDENT__ */ `\n        @fluentui/react-tree [${useTreeItem_unstable.name}]:\n        A flat treeitem must have \"aria-posinset\", \"aria-setsize\", \"aria-level\"\n        and \"parentValue\" (if \"aria-level\" > 1) to ensure a11y and navigation.\n\n        - \"aria-posinset\": the position of this treeitem in the current level of the tree.\n        - \"aria-setsize\": the number of siblings in this level of the tree.\n        - \"aria-level\": the current level of the treeitem.\n        - \"parentValue\": the \"value\" property of the parent item of this item.\n      `);\n    }\n  }\n}\n"],"names":["React","ReactDOM","getIntrinsicElementProps","useId","useEventCallback","slot","elementContains","useMergedRefs","isHTMLElement","Space","treeDataTypes","useTreeContext_unstable","useSubtreeContext_unstable","useTreeItemContext_unstable","TreeContext","dataTreeItemValueAttrName","useHasParentContext","treeClassNames","useTreeItem_unstable","props","ref","treeType","ctx","warnIfNoProperPropsFlatTreeItem","requestTreeResponse","navigationMode","forceUpdateRovingTabIndex","level","contextLevel","parentValue","value","internalValue","onClick","onKeyDown","onChange","as","itemType","ariaSelected","ariaExpanded","rest","actionsRef","useRef","expandIconRef","layoutRef","subtreeRef","selectionRef","treeItemRef","process","env","NODE_ENV","hasTreeContext","useEffect","current","querySelector","root","console","error","treeItem","tabIndex","open","openItems","has","getNextOpen","selectionMode","checked","checkedItems","get","handleClick","event","isEventFromActions","target","isEventFromSubtree","isEventFromSelection","contains","isEventFromExpandIcon","isDefaultPrevented","unstable_batchedUpdates","data","currentTarget","type","ExpandIconClick","Click","onOpenChange","requestType","handleKeyDown","isEventFromTreeItem","key","click","preventDefault","Enter","End","Home","ArrowUp","ArrowDown","hasAttribute","ArrowLeft","altKey","ArrowRight","isTypeAheadCharacter","length","match","ctrlKey","metaKey","TypeAhead","handleChange","components","isAsideVisible","isActionsVisible","always","role","undefined","elementType","name"],"mappings":"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"}