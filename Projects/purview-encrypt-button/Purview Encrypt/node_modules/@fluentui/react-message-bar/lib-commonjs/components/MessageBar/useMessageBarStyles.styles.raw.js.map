{"version":3,"sources":["../src/components/MessageBar/useMessageBarStyles.styles.ts"],"sourcesContent":["'use client';\n\nimport { makeResetStyles, makeStyles, mergeClasses, shorthands } from '@griffel/react';\nimport { tokens } from '@fluentui/react-theme';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\nimport type { MessageBarSlots, MessageBarState } from './MessageBar.types';\n\nexport const messageBarClassNames: SlotClassNames<MessageBarSlots> = {\n  root: 'fui-MessageBar',\n  icon: 'fui-MessageBar__icon',\n  bottomReflowSpacer: 'fui-MessageBar__bottomReflowSpacer',\n};\n\nconst useRootBaseStyles = makeResetStyles({\n  whiteSpace: 'nowrap',\n  display: 'grid',\n  gridTemplateColumns: 'auto 1fr auto auto',\n  gridTemplateRows: '1fr',\n  gridTemplateAreas: '\"icon body secondaryActions actions\"',\n  paddingLeft: tokens.spacingHorizontalM,\n  border: `${tokens.strokeWidthThin} solid ${tokens.colorNeutralStroke1}`,\n  borderRadius: tokens.borderRadiusMedium,\n  alignItems: 'center',\n  minHeight: '36px',\n  boxSizing: 'border-box',\n  backgroundColor: tokens.colorNeutralBackground3,\n});\n\nconst useIconBaseStyles = makeResetStyles({\n  gridArea: 'icon',\n  fontSize: tokens.fontSizeBase500,\n  marginRight: tokens.spacingHorizontalS,\n  color: tokens.colorNeutralForeground3,\n  display: 'flex',\n  alignItems: 'center',\n});\n\nconst useReflowSpacerBaseStyles = makeResetStyles({\n  marginBottom: tokens.spacingVerticalS,\n  gridArea: 'secondaryActions',\n});\n\nconst useStyles = makeStyles({\n  rootMultiline: {\n    whiteSpace: 'normal',\n    alignItems: 'start',\n    paddingTop: tokens.spacingVerticalMNudge,\n    gridTemplateColumns: 'auto 1fr auto',\n    gridTemplateAreas: `\n      \"icon body actions\"\n      \"secondaryActions secondaryActions secondaryActions\"\n    `,\n  },\n\n  secondaryActionsMultiline: {\n    justifyContent: 'end',\n    marginTop: tokens.spacingVerticalMNudge,\n    marginBottom: tokens.spacingVerticalS,\n    marginRight: '0px',\n  },\n\n  square: {\n    borderRadius: '0',\n  },\n});\n\nconst useIconIntentStyles = makeStyles({\n  info: {\n    /** already in base reset styles */\n  },\n  error: {\n    color: tokens.colorStatusDangerForeground1,\n  },\n  warning: {\n    color: tokens.colorStatusWarningForeground3,\n  },\n  success: {\n    color: tokens.colorStatusSuccessForeground1,\n  },\n});\n\nconst useRootIntentStyles = makeStyles({\n  info: {\n    /** already in base reset styles */\n  },\n  error: {\n    backgroundColor: tokens.colorStatusDangerBackground1,\n    ...shorthands.borderColor(tokens.colorStatusDangerBorder1),\n  },\n  warning: {\n    backgroundColor: tokens.colorStatusWarningBackground1,\n    ...shorthands.borderColor(tokens.colorStatusWarningBorder1),\n  },\n  success: {\n    backgroundColor: tokens.colorStatusSuccessBackground1,\n    ...shorthands.borderColor(tokens.colorStatusSuccessBorder1),\n  },\n});\n\n/**\n * Apply styling to the MessageBar slots based on the state\n */\nexport const useMessageBarStyles_unstable = (state: MessageBarState): MessageBarState => {\n  'use no memo';\n\n  const rootBaseStyles = useRootBaseStyles();\n  const iconBaseStyles = useIconBaseStyles();\n  const iconIntentStyles = useIconIntentStyles();\n  const rootIntentStyles = useRootIntentStyles();\n  const reflowSpacerStyles = useReflowSpacerBaseStyles();\n  const styles = useStyles();\n\n  state.root.className = mergeClasses(\n    messageBarClassNames.root,\n    rootBaseStyles,\n    state.layout === 'multiline' && styles.rootMultiline,\n    state.shape === 'square' && styles.square,\n    rootIntentStyles[state.intent],\n    state.root.className,\n  );\n\n  if (state.icon) {\n    state.icon.className = mergeClasses(\n      messageBarClassNames.icon,\n      iconBaseStyles,\n      iconIntentStyles[state.intent],\n      state.icon.className,\n    );\n  }\n\n  if (state.bottomReflowSpacer) {\n    state.bottomReflowSpacer.className = mergeClasses(messageBarClassNames.bottomReflowSpacer, reflowSpacerStyles);\n  }\n\n  return state;\n};\n"],"names":["makeResetStyles","makeStyles","mergeClasses","shorthands","tokens","messageBarClassNames","root","icon","bottomReflowSpacer","useRootBaseStyles","whiteSpace","display","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","paddingLeft","spacingHorizontalM","border","strokeWidthThin","colorNeutralStroke1","borderRadius","borderRadiusMedium","alignItems","minHeight","boxSizing","backgroundColor","colorNeutralBackground3","useIconBaseStyles","gridArea","fontSize","fontSizeBase500","marginRight","spacingHorizontalS","color","colorNeutralForeground3","useReflowSpacerBaseStyles","marginBottom","spacingVerticalS","useStyles","rootMultiline","paddingTop","spacingVerticalMNudge","secondaryActionsMultiline","justifyContent","marginTop","square","useIconIntentStyles","info","error","colorStatusDangerForeground1","warning","colorStatusWarningForeground3","success","colorStatusSuccessForeground1","useRootIntentStyles","colorStatusDangerBackground1","borderColor","colorStatusDangerBorder1","colorStatusWarningBackground1","colorStatusWarningBorder1","colorStatusSuccessBackground1","colorStatusSuccessBorder1","useMessageBarStyles_unstable","state","rootBaseStyles","iconBaseStyles","iconIntentStyles","rootIntentStyles","reflowSpacerStyles","styles","className","layout","shape","intent"],"mappings":"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"}