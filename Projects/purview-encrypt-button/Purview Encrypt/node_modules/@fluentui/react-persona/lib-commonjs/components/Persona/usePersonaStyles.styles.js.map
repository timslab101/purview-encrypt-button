{"version":3,"sources":["usePersonaStyles.styles.js"],"sourcesContent":["'use client';\nimport { makeResetStyles, makeStyles, mergeClasses } from '@griffel/react';\nimport { tokens, typographyStyles } from '@fluentui/react-theme';\nexport const personaClassNames = {\n    root: 'fui-Persona',\n    avatar: 'fui-Persona__avatar',\n    presence: 'fui-Persona__presence',\n    primaryText: 'fui-Persona__primaryText',\n    secondaryText: 'fui-Persona__secondaryText',\n    tertiaryText: 'fui-Persona__tertiaryText',\n    quaternaryText: 'fui-Persona__quaternaryText'\n};\nconst avatarSpacing = `--fui-Persona__avatar--spacing`;\nconst useRootClassName = makeResetStyles({\n    display: 'inline-grid',\n    gridAutoRows: 'max-content',\n    gridAutoFlow: 'column',\n    justifyItems: 'start',\n    gridTemplateColumns: 'max-content [middle] auto'\n});\n/**\n * Styles for the root slot\n */ const useStyles = makeStyles({\n    beforeAfterCenter: {\n        // This template is needed to make sure the Avatar is centered when it takes up more space than the text lines\n        gridTemplateRows: '1fr [primary] max-content [secondary] max-content [tertiary] max-content [quaternary] max-content 1fr'\n    },\n    after: {\n    },\n    before: {\n        justifyItems: 'end',\n        gridTemplateColumns: 'auto [middle] max-content'\n    },\n    below: {\n        gridAutoFlow: 'unset',\n        justifyItems: 'center',\n        gridTemplateColumns: 'unset'\n    },\n    media: {\n        gridRowStart: 'span 5'\n    },\n    mediaBeforeAfterCenter: {\n        gridRowStart: 'span 6'\n    },\n    start: {\n        alignSelf: 'start'\n    },\n    center: {\n        alignSelf: 'center'\n    },\n    afterAlignToPrimary: {\n        alignSelf: 'center',\n        gridRowStart: 'unset',\n        gridColumnEnd: 'middle'\n    },\n    beforeAlignToPrimary: {\n        alignSelf: 'center',\n        gridRowStart: 'unset',\n        gridColumnStart: 'middle'\n    },\n    secondLineSpacing: {\n        marginTop: '-2px'\n    },\n    primary: {\n        gridRowStart: 'primary'\n    },\n    secondary: {\n        gridRowStart: 'secondary'\n    },\n    tertiary: {\n        gridRowStart: 'tertiary'\n    },\n    quaternary: {\n        gridRowStart: 'quaternary'\n    }\n});\nconst useAvatarSpacingStyles = makeStyles({\n    'extra-small': {\n        [avatarSpacing]: tokens.spacingHorizontalSNudge\n    },\n    small: {\n        [avatarSpacing]: tokens.spacingHorizontalS\n    },\n    medium: {\n        [avatarSpacing]: tokens.spacingHorizontalS\n    },\n    large: {\n        [avatarSpacing]: tokens.spacingHorizontalMNudge\n    },\n    'extra-large': {\n        [avatarSpacing]: tokens.spacingHorizontalMNudge\n    },\n    huge: {\n        [avatarSpacing]: tokens.spacingHorizontalM\n    },\n    after: {\n        marginRight: `var(${avatarSpacing})`\n    },\n    below: {\n        marginBottom: `var(${avatarSpacing})`\n    },\n    before: {\n        marginLeft: `var(${avatarSpacing})`\n    }\n});\nconst usePresenceSpacingStyles = makeStyles({\n    small: {\n        [avatarSpacing]: tokens.spacingHorizontalSNudge\n    }\n});\n/**\n * Apply styling to the Persona slots based on the state\n */ export const usePersonaStyles_unstable = (state)=>{\n    'use no memo';\n    const { presenceOnly, size, textAlignment, textPosition } = state;\n    const alignToPrimary = presenceOnly && textAlignment === 'start' && size !== 'extra-large' && size !== 'huge';\n    const alignBeforeAfterCenter = textPosition !== 'below' && textAlignment === 'center';\n    const { primaryTextClassName, optionalTextClassName } = useTextClassNames(state, alignToPrimary);\n    const rootClassName = useRootClassName();\n    const styles = useStyles();\n    const avatarSpacingStyles = useAvatarSpacingStyles();\n    const presenceSpacingStyles = {\n        ...avatarSpacingStyles,\n        ...usePresenceSpacingStyles()\n    };\n    state.root.className = mergeClasses(personaClassNames.root, rootClassName, alignBeforeAfterCenter && styles.beforeAfterCenter, styles[textPosition], state.root.className);\n    if (state.avatar) {\n        state.avatar.className = mergeClasses(personaClassNames.avatar, textPosition !== 'below' && styles.media, alignBeforeAfterCenter && styles.mediaBeforeAfterCenter, styles[textAlignment], avatarSpacingStyles[size], avatarSpacingStyles[textPosition], state.avatar.className);\n    }\n    if (state.presence) {\n        state.presence.className = mergeClasses(personaClassNames.presence, textPosition !== 'below' && styles.media, alignBeforeAfterCenter && styles.mediaBeforeAfterCenter, styles[textAlignment], presenceSpacingStyles[size], presenceSpacingStyles[textPosition], textPosition === 'after' && alignToPrimary && styles.afterAlignToPrimary, textPosition === 'before' && alignToPrimary && styles.beforeAlignToPrimary, state.presence.className);\n    }\n    if (state.primaryText) {\n        state.primaryText.className = mergeClasses(personaClassNames.primaryText, alignBeforeAfterCenter && styles.primary, primaryTextClassName, state.primaryText.className);\n    }\n    if (state.secondaryText) {\n        state.secondaryText.className = mergeClasses(personaClassNames.secondaryText, alignBeforeAfterCenter && styles.secondary, optionalTextClassName, styles.secondLineSpacing, state.secondaryText.className);\n    }\n    if (state.tertiaryText) {\n        state.tertiaryText.className = mergeClasses(personaClassNames.tertiaryText, alignBeforeAfterCenter && styles.tertiary, optionalTextClassName, state.tertiaryText.className);\n    }\n    if (state.quaternaryText) {\n        state.quaternaryText.className = mergeClasses(personaClassNames.quaternaryText, alignBeforeAfterCenter && styles.quaternary, optionalTextClassName, state.quaternaryText.className);\n    }\n    return state;\n};\nconst usePrimaryTextBaseClassName = makeResetStyles({\n    display: 'block',\n    color: tokens.colorNeutralForeground1,\n    ...typographyStyles.body1\n});\nconst useOptionalTextBaseClassName = makeResetStyles({\n    display: 'block',\n    color: tokens.colorNeutralForeground2,\n    ...typographyStyles.caption1\n});\nconst useTextStyles = makeStyles({\n    beforeAlignToPrimary: {\n        gridColumnEnd: 'middle'\n    },\n    afterAlignToPrimary: {\n        gridColumnStart: 'middle'\n    },\n    body1: typographyStyles.body1,\n    caption1: typographyStyles.caption1,\n    subtitle2: typographyStyles.subtitle2\n});\nconst useTextClassNames = (state, alignToPrimary)=>{\n    const { presenceOnly, size, textPosition } = state;\n    const primaryTextBaseClassName = usePrimaryTextBaseClassName();\n    const optionalTextBaseClassName = useOptionalTextBaseClassName();\n    const textStyles = useTextStyles();\n    let primaryTextSize;\n    let alignToPrimaryClassName;\n    if (presenceOnly) {\n        if (size === 'extra-small') {\n            primaryTextSize = state.numTextLines <= 1 && textStyles.caption1;\n        } else if (size === 'extra-large' || size === 'huge') {\n            primaryTextSize = textStyles.subtitle2;\n        }\n        if (alignToPrimary) {\n            if (textPosition === 'before') {\n                alignToPrimaryClassName = textStyles.beforeAlignToPrimary;\n            } else if (textPosition === 'after') {\n                alignToPrimaryClassName = textStyles.afterAlignToPrimary;\n            }\n        }\n    } else {\n        if (size === 'huge') {\n            primaryTextSize = textStyles.subtitle2;\n        } else if (size === 'extra-large') {\n            primaryTextSize = textStyles.subtitle2;\n        }\n    }\n    return {\n        primaryTextClassName: mergeClasses(primaryTextBaseClassName, primaryTextSize, alignToPrimaryClassName),\n        optionalTextClassName: mergeClasses(optionalTextBaseClassName, !presenceOnly && size === 'huge' && textStyles.body1, alignToPrimaryClassName)\n    };\n};\n"],"names":["__resetStyles","__styles","mergeClasses","tokens","typographyStyles","personaClassNames","root","avatar","presence","primaryText","secondaryText","tertiaryText","quaternaryText","avatarSpacing","useRootClassName","useStyles","beforeAfterCenter","wkccdc","after","before","B7hvi0a","Budl1dq","below","Bxotwcr","media","Ijaq50","mediaBeforeAfterCenter","start","qb2dma","center","afterAlignToPrimary","Bw0ie65","beforeAlignToPrimary","Br312pm","secondLineSpacing","B6of3ja","primary","secondary","tertiary","quaternary","d","useAvatarSpacingStyles","Bs1gm4r","small","medium","large","huge","t21cq0","jrapky","Frg6f3","usePresenceSpacingStyles","usePersonaStyles_unstable","state","presenceOnly","size","textAlignment","textPosition","alignToPrimary","alignBeforeAfterCenter","primaryTextClassName","optionalTextClassName","useTextClassNames","rootClassName","styles","avatarSpacingStyles","presenceSpacingStyles","className","usePrimaryTextBaseClassName","useOptionalTextBaseClassName","useTextStyles","body1","Bahqtrf","Be2twd7","Bhrd7zp","Bg96gwp","caption1","subtitle2","primaryTextBaseClassName","optionalTextBaseClassName","textStyles","primaryTextSize","alignToPrimaryClassName","numTextLines"],"mappings":"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"}