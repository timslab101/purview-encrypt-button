{"version":3,"sources":["../src/utils/devtools.ts"],"sourcesContent":["import type { MiddlewareState } from '@floating-ui/dom';\nimport type { PositioningOptions, Position, Alignment } from '../types';\nimport { isHTMLElement } from '@fluentui/react-utilities';\nimport { listScrollParents } from './listScrollParents';\nimport { fromFloatingUIPlacement } from './fromFloatingUIPlacement';\n\nexport const devtoolsCallback =\n  (options: Pick<PositioningOptions, 'flipBoundary' | 'overflowBoundary'>) =>\n  (\n    middlewareState: MiddlewareState,\n  ): {\n    type: 'FluentUIMiddleware';\n    middlewareState: MiddlewareState;\n    options: Pick<PositioningOptions, 'flipBoundary' | 'overflowBoundary'>;\n    initialPlacement: { position: Position; alignment?: Alignment };\n    placement: { position: Position; alignment?: Alignment };\n    flipBoundaries: HTMLElement[];\n    overflowBoundaries: HTMLElement[];\n    scrollParents: HTMLElement[];\n  } => {\n    const {\n      elements: { floating, reference },\n    } = middlewareState;\n    const scrollParentsSet = new Set<HTMLElement>();\n    if (isHTMLElement(reference)) {\n      listScrollParents(reference).forEach(scrollParent => scrollParentsSet.add(scrollParent));\n    }\n    listScrollParents(floating).forEach(scrollParent => scrollParentsSet.add(scrollParent));\n    const flipBoundaries: HTMLElement[] = Array.isArray(options.flipBoundary)\n      ? options.flipBoundary\n      : isHTMLElement(options.flipBoundary)\n      ? [options.flipBoundary]\n      : [];\n    const overflowBoundaries: HTMLElement[] = Array.isArray(options.overflowBoundary)\n      ? options.overflowBoundary\n      : isHTMLElement(options.overflowBoundary)\n      ? [options.overflowBoundary]\n      : [];\n    return {\n      type: 'FluentUIMiddleware',\n      middlewareState,\n      options,\n      initialPlacement: fromFloatingUIPlacement(middlewareState.initialPlacement),\n      placement: fromFloatingUIPlacement(middlewareState.placement),\n      flipBoundaries,\n      overflowBoundaries,\n      scrollParents: Array.from(scrollParentsSet),\n    } as const;\n  };\n"],"names":["isHTMLElement","listScrollParents","fromFloatingUIPlacement","devtoolsCallback","options","middlewareState","elements","floating","reference","scrollParentsSet","Set","forEach","scrollParent","add","flipBoundaries","Array","isArray","flipBoundary","overflowBoundaries","overflowBoundary","type","initialPlacement","placement","scrollParents","from"],"mappings":";;;;+BAMaG;;;;;;gCAJiB,4BAA4B;mCACxB,sBAAsB;yCAChB,4BAA4B;AAE7D,yBACL,CAACC,UACD,CACEC;QAWA,MAAM,EACJC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,EAAE,EAClC,GAAGH;QACJ,MAAMI,mBAAmB,IAAIC;QAC7B,QAAIV,6BAAAA,EAAcQ,YAAY;gBAC5BP,oCAAAA,EAAkBO,WAAWG,OAAO,CAACC,CAAAA,eAAgBH,iBAAiBI,GAAG,CAACD;QAC5E;YACAX,oCAAAA,EAAkBM,UAAUI,OAAO,CAACC,CAAAA,eAAgBH,iBAAiBI,GAAG,CAACD;QACzE,MAAME,iBAAgCC,MAAMC,OAAO,CAACZ,QAAQa,YAAY,IACpEb,QAAQa,YAAY,OACpBjB,6BAAAA,EAAcI,QAAQa,YAAY,IAClC;YAACb,QAAQa,YAAY;SAAC,GACtB,EAAE;QACN,MAAMC,qBAAoCH,MAAMC,OAAO,CAACZ,QAAQe,gBAAgB,IAC5Ef,QAAQe,gBAAgB,OACxBnB,6BAAAA,EAAcI,QAAQe,gBAAgB,IACtC;YAACf,QAAQe,gBAAgB;SAAC,GAC1B,EAAE;QACN,OAAO;YACLC,MAAM;YACNf;YACAD;YACAiB,sBAAkBnB,gDAAAA,EAAwBG,gBAAgBgB,gBAAgB;YAC1EC,eAAWpB,gDAAAA,EAAwBG,gBAAgBiB,SAAS;YAC5DR;YACAI;YACAK,eAAeR,MAAMS,IAAI,CAACf;QAC5B;IACF,EAAE"}