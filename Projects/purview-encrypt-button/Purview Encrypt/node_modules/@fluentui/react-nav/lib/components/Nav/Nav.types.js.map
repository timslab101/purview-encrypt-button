{"version":3,"sources":["../src/components/Nav/Nav.types.ts"],"sourcesContent":["import * as React from 'react';\n\nimport type { ComponentProps, ComponentState, EventData, EventHandler, Slot } from '@fluentui/react-utilities';\nimport type { NavContextValue, NavItemValue } from '../NavContext.types';\n\nexport type NavSlots = {\n  root: NonNullable<Slot<'div'>>;\n};\n\n/***\n * Indicates the vertical density of the Nav content.\n * This does not affect horizontal spacing.\n */\nexport type NavDensity = 'small' | 'medium';\n\n/**\n * Nav Props\n */\nexport type NavProps = ComponentProps<NavSlots> & {\n  /**\n   * The value of the navItem to be selected by default.\n   * Typically useful when the selectedValue is uncontrolled.\n   * Mutually exclusive with selectedValue.\n   * Empty string indicates no selection.\n   */\n  defaultSelectedValue?: NavItemValue;\n\n  /**\n   * The value of the navCategory to be selected by default.\n   * Typically useful when the selectedValue is uncontrolled.\n   * Mutually exclusive with selectedValue.\n   * Empty string indicates no selection.\n   */\n  defaultSelectedCategoryValue?: NavItemValue;\n\n  /**\n   * Set of categories that are opened by default.\n   * Typically useful when the openCategories is uncontrolled.\n   */\n  defaultOpenCategories?: NavItemValue[];\n\n  /**\n   * Controls the open categories.\n   * For use in controlled scenarios.\n   */\n  openCategories?: NavItemValue[];\n\n  /**\n   * Raised when a navItem is selected.\n   * If the navItem is child of a category, the categoryValue will be provided\n   */\n  onNavItemSelect?: EventHandler<OnNavItemSelectData>;\n\n  /**\n   * The value of the currently selected navItem.\n   * Mutually exclusive with defaultSelectedValue.\n   * @default undefined\n   */\n  selectedValue?: NavItemValue;\n\n  /**\n   * Indicates a category that has a selected child\n   * Will show the category as selected if it is closed.\n   * @default undefined\n   */\n  selectedCategoryValue?: NavItemValue;\n\n  /**\n   * Indicates if Nav supports multiple open Categories at the same time.\n   * @default true, indicating that multiple categories can be open at the same time.\n   */\n  multiple?: boolean;\n\n  /**\n   * Callback raised when a NavCategoryItem is toggled.\n   */\n  onNavCategoryItemToggle?: EventHandler<OnNavItemSelectData>;\n\n  /**\n   * The vertical density of the Nav and it's children\n   * @default 'medium'\n   */\n  density?: NavDensity;\n};\n\nexport type OnNavItemSelectData = EventData<'click', React.MouseEvent<HTMLButtonElement | HTMLAnchorElement>> & {\n  /**\n   * The value of the selected navItem.\n   * In the case of a category selection, this will be the value of the selected category.\n   */\n  value: NavItemValue;\n\n  /**\n   * The parent value of the selected navSubItem\n   * Null if not a child of a category\n   */\n  categoryValue?: NavItemValue;\n};\n\n/**\n * State used in rendering Nav\n */\nexport type NavState = ComponentState<NavSlots> & NavContextValue;\n"],"names":["React"],"mappings":"AAAA,YAAYA,WAAW,QAAQ"}