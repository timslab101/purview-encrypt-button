{"version":3,"sources":["../src/components/NavContext.types.ts"],"sourcesContent":["import * as React from 'react';\nimport { EventHandler } from '@fluentui/react-utilities';\n\nimport type { NavProps, OnNavItemSelectData } from './Nav/Nav.types';\n\nexport type NavContextValue = Pick<\n  NavProps,\n  'onNavItemSelect' | 'selectedValue' | 'selectedCategoryValue' | 'density'\n> & {\n  /** A callback to allow a navItem to register itself with the navItem list. */\n  onRegister: RegisterNavItemEventHandler;\n\n  /** A callback to allow a navItem to unregister itself with the navItem list. */\n  onUnregister: RegisterNavItemEventHandler;\n  /**\n   * A callback to allow a navItem to select itself when pressed.\n   */\n  onSelect: EventHandler<OnNavItemSelectData>;\n  /**\n   * Gets the registered navItem data along with current and previous selected values.\n   */\n  getRegisteredNavItems: () => {\n    selectedValue?: NavItemValue;\n    selectedCategoryValue?: NavItemValue;\n    previousSelectedValue?: NavItemValue;\n    registeredNavItems: Record<string, NavItemRegisterData>;\n  };\n  /**\n   * Callback used by NavCategoryItem to request a change on it's own opened state\n   * Should be used to toggle NavCategoryItem's open state\n   */\n  onRequestNavCategoryItemToggle: EventHandler<OnNavItemSelectData>;\n\n  /**\n   * The list of opened panels by index\n   */\n  openCategories: NavItemValue[];\n\n  /**\n   * Indicates if Nav supports multiple open Categories at the same time.\n   * @default true, indicating that multiple categories can be open at the same time.\n   */\n  multiple: boolean;\n\n  /**\n   * Setting this to true enables tab AND arrow navigation.\n   * @default false\n   */\n  tabbable: boolean;\n};\n\n/**\n * Any value that identifies a specific Item.\n */\nexport type NavItemValue = string;\n\n/**\n * Context values used in rendering navItemList.\n */\nexport type NavContextValues = {\n  /**\n   * The context of the navItem list available to each navItem.\n   */\n  nav: NavContextValue;\n};\n\nexport type NavItemRegisterData = {\n  /**\n   * The value of the navItem.\n   */\n  value: NavItemValue;\n\n  /**\n   * The reference to the navItem HTML element.\n   */\n  ref: React.RefObject<HTMLElement | null>;\n};\n\nexport type RegisterNavItemEventHandler = (data: NavItemRegisterData) => void;\n"],"names":["React"],"mappings":";;;;;iEAAuB,QAAQ"}