{"version":3,"sources":["../src/components/Nav/useNav.ts"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport {\n  useControllableState,\n  useEventCallback,\n  useMergedRefs,\n  slot,\n  getIntrinsicElementProps,\n  EventHandler,\n} from '@fluentui/react-utilities';\n\nimport type { NavProps, NavState, OnNavItemSelectData } from './Nav.types';\nimport type { NavItemRegisterData, NavItemValue } from '../NavContext.types';\n\n/**\n * Initial value for the uncontrolled case of the list of open indexes\n */\nfunction initializeUncontrolledOpenCategories({\n  defaultOpenCategories,\n  multiple,\n}: Pick<NavProps, 'defaultOpenCategories' | 'multiple'>): NavItemValue[] | undefined {\n  if (defaultOpenCategories !== undefined) {\n    if (Array.isArray(defaultOpenCategories)) {\n      return multiple ? defaultOpenCategories : [defaultOpenCategories[0]];\n    }\n    return [defaultOpenCategories];\n  }\n  return undefined;\n}\n\n/**\n * Updates the list of open indexes based on an index that changes\n * @param value - the index that will change\n * @param previousOpenItems - list of current open indexes\n * @param multiple - if Nav supports open categories at the same time\n */\nconst updateOpenCategories = (value: NavItemValue, previousOpenItems: NavItemValue[], multiple: boolean) => {\n  if (multiple) {\n    if (previousOpenItems.includes(value)) {\n      return previousOpenItems.filter(i => i !== value);\n    } else {\n      return [...previousOpenItems, value];\n    }\n  }\n\n  return previousOpenItems[0] === value ? [] : [value];\n};\n\n/**\n * Create the state required to render Nav.\n *\n * The returned state can be modified with hooks such as useNavStyles,\n * before being passed to renderNav.\n *\n * @param props - props from this instance of Nav\n * @param ref - reference to root HTMLDivElement of Nav\n */\nexport const useNav_unstable = (props: NavProps, ref: React.Ref<HTMLDivElement>): NavState => {\n  const {\n    onNavItemSelect,\n    onNavCategoryItemToggle,\n    multiple = true,\n    density = 'medium',\n    openCategories: controlledOpenCategoryItems,\n    selectedCategoryValue: controlledSelectedCategoryValue,\n    selectedValue: controlledSelectedValue,\n    defaultOpenCategories,\n    defaultSelectedValue,\n    defaultSelectedCategoryValue,\n  } = props;\n\n  const innerRef = React.useRef<HTMLElement>(null);\n\n  const [openCategories, setOpenCategories] = useControllableState({\n    state: controlledOpenCategoryItems,\n    defaultState: initializeUncontrolledOpenCategories({ defaultOpenCategories, multiple }),\n    initialState: [],\n  });\n\n  const [selectedCategoryValue, setSelectedCategoryValue] = useControllableState({\n    state: controlledSelectedCategoryValue,\n    defaultState: defaultSelectedCategoryValue,\n    initialState: undefined,\n  });\n\n  const [selectedValue, setSelectedValue] = useControllableState({\n    state: controlledSelectedValue,\n    defaultState: defaultSelectedValue,\n    initialState: undefined,\n  });\n\n  // considered usePrevious, but it is sensitive to re-renders\n  // this could cause the previous to move to current in the case where the navItem list re-renders.\n  // these refs avoid getRegisteredNavItems changing when selectedValue changes and causing\n  // renders for navItems that have not changed.\n  const currentSelectedValue = React.useRef<NavItemValue | undefined>(undefined);\n  const previousSelectedValue = React.useRef<NavItemValue | undefined>(undefined);\n\n  const currentSelectedCategoryValue = React.useRef<NavItemValue | undefined>(undefined);\n  const previousSelectedCategoryValue = React.useRef<NavItemValue | undefined>(undefined);\n\n  if (currentSelectedValue.current !== selectedValue) {\n    previousSelectedValue.current = currentSelectedValue.current;\n    currentSelectedValue.current = selectedValue;\n  }\n\n  if (currentSelectedCategoryValue.current !== selectedCategoryValue) {\n    previousSelectedCategoryValue.current = currentSelectedCategoryValue.current;\n    currentSelectedCategoryValue.current = selectedCategoryValue;\n  }\n\n  // used for NavItems and NavSubItems\n  const onSelect: EventHandler<OnNavItemSelectData> = useEventCallback((event, data) => {\n    setSelectedValue(data.value);\n    setSelectedCategoryValue(data.categoryValue ? data.categoryValue : '');\n    onNavItemSelect?.(event, data);\n  });\n\n  // used for NavCategoryItems\n  const onRequestNavCategoryItemToggle: EventHandler<OnNavItemSelectData> = useEventCallback((event, data) => {\n    if (data.categoryValue !== undefined) {\n      const nextOpenCategories = updateOpenCategories(data.categoryValue, openCategories ?? [], multiple);\n      onNavCategoryItemToggle?.(event, data);\n      setOpenCategories(nextOpenCategories);\n    }\n  });\n\n  const registeredNavItems = React.useRef<Record<string, NavItemRegisterData>>({});\n\n  const onRegister = React.useCallback((data: NavItemRegisterData) => {\n    registeredNavItems.current[JSON.stringify(data.value)] = data;\n  }, []);\n\n  const onUnregister = React.useCallback((data: NavItemRegisterData) => {\n    delete registeredNavItems.current[JSON.stringify(data.value)];\n  }, []);\n\n  const getRegisteredNavItems = React.useCallback(() => {\n    return {\n      selectedValue: currentSelectedValue.current,\n      previousSelectedValue: previousSelectedValue.current,\n      selectedCategoryValue: currentSelectedCategoryValue.current,\n      previousSelectedCategoryValue: previousSelectedCategoryValue.current,\n      registeredNavItems: registeredNavItems.current,\n    };\n  }, []);\n\n  return {\n    components: {\n      root: 'div',\n    },\n    root: slot.always(\n      getIntrinsicElementProps('div', {\n        ref: useMergedRefs(ref, innerRef) as React.Ref<HTMLDivElement>,\n        ...props,\n      }),\n      { elementType: 'div' },\n    ),\n    openCategories,\n    selectedValue,\n    selectedCategoryValue,\n    onRegister,\n    onUnregister,\n    onSelect,\n    getRegisteredNavItems,\n    onRequestNavCategoryItemToggle,\n    multiple,\n    density,\n    tabbable: false,\n  };\n};\n"],"names":["React","useControllableState","useEventCallback","useMergedRefs","slot","getIntrinsicElementProps","initializeUncontrolledOpenCategories","defaultOpenCategories","multiple","undefined","Array","isArray","updateOpenCategories","value","previousOpenItems","includes","filter","i","useNav_unstable","props","ref","onNavItemSelect","onNavCategoryItemToggle","density","openCategories","controlledOpenCategoryItems","selectedCategoryValue","controlledSelectedCategoryValue","selectedValue","controlledSelectedValue","defaultSelectedValue","defaultSelectedCategoryValue","innerRef","useRef","setOpenCategories","state","defaultState","initialState","setSelectedCategoryValue","setSelectedValue","currentSelectedValue","previousSelectedValue","currentSelectedCategoryValue","previousSelectedCategoryValue","current","onSelect","event","data","categoryValue","onRequestNavCategoryItemToggle","nextOpenCategories","registeredNavItems","onRegister","useCallback","JSON","stringify","onUnregister","getRegisteredNavItems","components","root","always","elementType","tabbable"],"mappings":"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"}