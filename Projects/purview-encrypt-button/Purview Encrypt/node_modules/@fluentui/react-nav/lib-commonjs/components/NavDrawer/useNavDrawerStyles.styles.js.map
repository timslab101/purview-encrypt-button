{"version":3,"sources":["useNavDrawerStyles.styles.js"],"sourcesContent":["'use client';\nimport { makeStyles, mergeClasses } from '@griffel/react';\nimport { navItemTokens } from '../sharedNavStyles.styles';\nexport const navDrawerClassNames = {\n    root: 'fui-NavDrawer'\n};\n/**\n * Styles for the root slot\n */ const useStyles = makeStyles({\n    root: {\n        backgroundColor: navItemTokens.backgroundColor,\n        alignItems: 'unset'\n    },\n    // seperate style so it can be applied conditionally\n    // if size is not set, use default width from the token.\n    defaultWidth: {\n        width: `${navItemTokens.defaultDrawerWidth}px`\n    }\n});\n/**\n * Apply styling to the NavDrawer slots based on the state\n */ export const useNavDrawerStyles_unstable = (state)=>{\n    'use no memo';\n    const { size } = state;\n    const styles = useStyles();\n    state.root.className = mergeClasses(navDrawerClassNames.root, styles.root, !size && styles.defaultWidth, state.root.className);\n    return state;\n};\n"],"names":["__styles","mergeClasses","navItemTokens","navDrawerClassNames","root","useStyles","De3pzq","Bt984gj","defaultWidth","a9b677","d","useNavDrawerStyles_unstable","state","size","styles","className"],"mappings":"AAAA,YAAY;;;;;;;;;;;;IAGCG,mBAAmB;;;+BAkBY;eAA3BQ;;;uBApBwB,gBAAgB;AAElD,4BAA4B;IAC/BP,IAAI,EAAE;AACV,CAAC;AACD;;CAEA,GAAI,MAAMC,SAAS,GAAA,WAAA,OAAGL,eAAA,EAAA;IAAAI,IAAA,EAAA;QAAAE,MAAA,EAAA;QAAAC,OAAA,EAAA;IAAA;IAAAC,YAAA,EAAA;QAAAC,MAAA,EAAA;IAAA;AAAA,GAAA;IAAAC,CAAA,EAAA;QAAA;QAAA;QAAA;KAAA;AAAA,CAUrB,CAAC;AAGS,qCAAqCE,KAAK,IAAG;IACpD,aAAa;IACb,MAAM,EAAEC,IAAAA,EAAM,GAAGD,KAAK;IACtB,MAAME,MAAM,GAAGT,SAAS,CAAC,CAAC;IAC1BO,KAAK,CAACR,IAAI,CAACW,SAAS,OAAGd,mBAAY,EAACE,mBAAmB,CAACC,IAAI,EAAEU,MAAM,CAACV,IAAI,EAAE,CAACS,IAAI,IAAIC,MAAM,CAACN,YAAY,EAAEI,KAAK,CAACR,IAAI,CAACW,SAAS,CAAC;IAC9H,OAAOH,KAAK;AAChB,CAAC"}