'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    navSubItemClassNames: function() {
        return navSubItemClassNames;
    },
    useNavSubItemStyles_unstable: function() {
        return useNavSubItemStyles_unstable;
    }
});
const _react = require("@griffel/react");
const _sharedNavStylesstyles = require("../sharedNavStyles.styles");
const navSubItemClassNames = {
    root: 'fui-NavSubItem'
};
/**
 * Styles for the content slot (children)
 */ const useNavSubItemSpecificStyles = /*#__PURE__*/ (0, _react.__styles)({
    base: {
        B1hrpyx: "fqo71ku"
    },
    smallBase: {
        B1hrpyx: "f17f9sv1"
    },
    selectedIndicator: {
        rjyhj6: "f1f74g36"
    }
}, {
    d: [
        ".fqo71ku{-webkit-padding-start:46px;padding-inline-start:46px;}",
        ".f17f9sv1{-webkit-padding-start:40px;padding-inline-start:40px;}",
        ".f1f74g36::after{-webkit-margin-start:-52px;margin-inline-start:-52px;}"
    ]
});
const useNavSubItemStyles_unstable = (state)=>{
    'use no memo';
    const rootDefaultClassName = (0, _sharedNavStylesstyles.useRootDefaultClassName)();
    const smallStyles = (0, _sharedNavStylesstyles.useSmallStyles)();
    const contentStyles = (0, _sharedNavStylesstyles.useContentStyles)();
    const indicatorStyles = (0, _sharedNavStylesstyles.useIndicatorStyles)();
    const navSubItemSpecificStyles = useNavSubItemSpecificStyles();
    const { selected, density } = state;
    const isSmallDensity = density === 'small';
    state.root.className = (0, _react.mergeClasses)(navSubItemClassNames.root, rootDefaultClassName, isSmallDensity && smallStyles.root, isSmallDensity && navSubItemSpecificStyles.smallBase, navSubItemSpecificStyles.base, selected && indicatorStyles.base, selected && contentStyles.selected, selected && navSubItemSpecificStyles.selectedIndicator, state.root.className);
    return state;
};
