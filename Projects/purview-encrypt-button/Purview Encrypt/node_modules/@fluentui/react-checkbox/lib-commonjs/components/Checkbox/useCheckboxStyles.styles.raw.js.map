{"version":3,"sources":["../src/components/Checkbox/useCheckboxStyles.styles.ts"],"sourcesContent":["'use client';\n\nimport { makeResetStyles, makeStyles, mergeClasses } from '@griffel/react';\nimport { createFocusOutlineStyle } from '@fluentui/react-tabster';\nimport { tokens } from '@fluentui/react-theme';\nimport { CheckboxSlots, CheckboxState } from './Checkbox.types';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\nexport const checkboxClassNames: SlotClassNames<CheckboxSlots> = {\n  root: 'fui-Checkbox',\n  label: 'fui-Checkbox__label',\n  input: 'fui-Checkbox__input',\n  indicator: 'fui-Checkbox__indicator',\n};\n\n// CSS variables used internally in Checkbox's styles\nconst vars = {\n  indicatorColor: '--fui-Checkbox__indicator--color',\n  indicatorBorderColor: '--fui-Checkbox__indicator--borderColor',\n  indicatorBackgroundColor: '--fui-Checkbox__indicator--backgroundColor',\n} as const;\n\n// The indicator size is used by the indicator and label styles\nconst indicatorSizeMedium = '16px';\nconst indicatorSizeLarge = '20px';\n\nconst useRootBaseClassName = makeResetStyles({\n  position: 'relative',\n  display: 'inline-flex',\n  cursor: 'pointer',\n  verticalAlign: 'middle',\n  color: tokens.colorNeutralForeground3,\n  ...createFocusOutlineStyle({ style: {}, selector: 'focus-within' }),\n});\n\nconst useRootStyles = makeStyles({\n  unchecked: {\n    ':hover': {\n      color: tokens.colorNeutralForeground2,\n      [vars.indicatorBorderColor]: tokens.colorNeutralStrokeAccessibleHover,\n    },\n\n    ':active': {\n      color: tokens.colorNeutralForeground1,\n      [vars.indicatorBorderColor]: tokens.colorNeutralStrokeAccessiblePressed,\n    },\n  },\n\n  checked: {\n    color: tokens.colorNeutralForeground1,\n    [vars.indicatorBackgroundColor]: tokens.colorCompoundBrandBackground,\n    [vars.indicatorColor]: tokens.colorNeutralForegroundInverted,\n    [vars.indicatorBorderColor]: tokens.colorCompoundBrandBackground,\n\n    ':hover': {\n      [vars.indicatorBackgroundColor]: tokens.colorCompoundBrandBackgroundHover,\n      [vars.indicatorBorderColor]: tokens.colorCompoundBrandBackgroundHover,\n    },\n\n    ':active': {\n      [vars.indicatorBackgroundColor]: tokens.colorCompoundBrandBackgroundPressed,\n      [vars.indicatorBorderColor]: tokens.colorCompoundBrandBackgroundPressed,\n    },\n  },\n\n  mixed: {\n    color: tokens.colorNeutralForeground1,\n    [vars.indicatorBorderColor]: tokens.colorCompoundBrandStroke,\n    [vars.indicatorColor]: tokens.colorCompoundBrandForeground1,\n\n    ':hover': {\n      [vars.indicatorBorderColor]: tokens.colorCompoundBrandStrokeHover,\n      [vars.indicatorColor]: tokens.colorCompoundBrandForeground1Hover,\n    },\n\n    ':active': {\n      [vars.indicatorBorderColor]: tokens.colorCompoundBrandStrokePressed,\n      [vars.indicatorColor]: tokens.colorCompoundBrandForeground1Pressed,\n    },\n  },\n\n  disabled: {\n    cursor: 'default',\n\n    color: tokens.colorNeutralForegroundDisabled,\n    [vars.indicatorBorderColor]: tokens.colorNeutralStrokeDisabled,\n    [vars.indicatorColor]: tokens.colorNeutralForegroundDisabled,\n\n    '@media (forced-colors: active)': {\n      color: 'GrayText',\n      [vars.indicatorColor]: 'GrayText',\n    },\n  },\n});\n\nconst useInputBaseClassName = makeResetStyles({\n  boxSizing: 'border-box',\n  cursor: 'inherit',\n  height: '100%',\n  margin: 0,\n  opacity: 0,\n  position: 'absolute',\n  top: 0,\n  // Calculate the width of the hidden input by taking into account the size of the indicator + the padding around it.\n  // This is done so that clicking on that \"empty space\" still toggles the checkbox.\n  width: `calc(${indicatorSizeMedium} + 2 * ${tokens.spacingHorizontalS})`,\n});\n\nconst useInputStyles = makeStyles({\n  before: {\n    right: 0,\n  },\n  after: {\n    left: 0,\n  },\n\n  large: {\n    width: `calc(${indicatorSizeLarge} + 2 * ${tokens.spacingHorizontalS})`,\n  },\n});\n\nconst useIndicatorBaseClassName = makeResetStyles({\n  alignSelf: 'flex-start',\n  boxSizing: 'border-box',\n  flexShrink: 0,\n\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  overflow: 'hidden',\n\n  color: `var(${vars.indicatorColor})`,\n  backgroundColor: `var(${vars.indicatorBackgroundColor})`,\n  borderColor: `var(${vars.indicatorBorderColor}, ${tokens.colorNeutralStrokeAccessible})`,\n  borderStyle: 'solid',\n  borderWidth: tokens.strokeWidthThin,\n  borderRadius: tokens.borderRadiusSmall,\n  margin: tokens.spacingVerticalS + ' ' + tokens.spacingHorizontalS,\n  fill: 'currentColor',\n  pointerEvents: 'none',\n\n  fontSize: '12px',\n  height: indicatorSizeMedium,\n  width: indicatorSizeMedium,\n});\n\nconst useIndicatorStyles = makeStyles({\n  large: {\n    fontSize: '16px',\n    height: indicatorSizeLarge,\n    width: indicatorSizeLarge,\n  },\n\n  circular: { borderRadius: tokens.borderRadiusCircular },\n});\n\n// Can't use makeResetStyles here because Label is a component that may itself use makeResetStyles.\nconst useLabelStyles = makeStyles({\n  base: {\n    alignSelf: 'center',\n    color: 'inherit',\n    cursor: 'inherit',\n    padding: `${tokens.spacingVerticalS} ${tokens.spacingHorizontalS}`,\n  },\n\n  before: {\n    paddingRight: tokens.spacingHorizontalXS,\n  },\n  after: {\n    paddingLeft: tokens.spacingHorizontalXS,\n  },\n\n  // Use a (negative) margin to account for the difference between the indicator's height and the label's line height.\n  // This prevents the label from expanding the height of the checkbox, but preserves line height if the label wraps.\n  medium: {\n    marginTop: `calc((${indicatorSizeMedium} - ${tokens.lineHeightBase300}) / 2)`,\n    marginBottom: `calc((${indicatorSizeMedium} - ${tokens.lineHeightBase300}) / 2)`,\n  },\n  large: {\n    marginTop: `calc((${indicatorSizeLarge} - ${tokens.lineHeightBase300}) / 2)`,\n    marginBottom: `calc((${indicatorSizeLarge} - ${tokens.lineHeightBase300}) / 2)`,\n  },\n});\n\n/**\n * Apply styling to the Checkbox slots based on the state\n */\nexport const useCheckboxStyles_unstable = (state: CheckboxState): CheckboxState => {\n  'use no memo';\n\n  const { checked, disabled, labelPosition, shape, size } = state;\n\n  const rootBaseClassName = useRootBaseClassName();\n  const rootStyles = useRootStyles();\n  state.root.className = mergeClasses(\n    checkboxClassNames.root,\n    rootBaseClassName,\n    disabled\n      ? rootStyles.disabled\n      : checked === 'mixed'\n      ? rootStyles.mixed\n      : checked\n      ? rootStyles.checked\n      : rootStyles.unchecked,\n    state.root.className,\n  );\n\n  const inputBaseClassName = useInputBaseClassName();\n  const inputStyles = useInputStyles();\n  state.input.className = mergeClasses(\n    checkboxClassNames.input,\n    inputBaseClassName,\n    size === 'large' && inputStyles.large,\n    inputStyles[labelPosition],\n    state.input.className,\n  );\n\n  const indicatorBaseClassName = useIndicatorBaseClassName();\n  const indicatorStyles = useIndicatorStyles();\n  if (state.indicator) {\n    state.indicator.className = mergeClasses(\n      checkboxClassNames.indicator,\n      indicatorBaseClassName,\n      size === 'large' && indicatorStyles.large,\n      shape === 'circular' && indicatorStyles.circular,\n      state.indicator.className,\n    );\n  }\n\n  const labelStyles = useLabelStyles();\n  if (state.label) {\n    state.label.className = mergeClasses(\n      checkboxClassNames.label,\n      labelStyles.base,\n      labelStyles[size],\n      labelStyles[labelPosition],\n      state.label.className,\n    );\n  }\n\n  return state;\n};\n"],"names":["makeResetStyles","makeStyles","mergeClasses","createFocusOutlineStyle","tokens","checkboxClassNames","root","label","input","indicator","vars","indicatorColor","indicatorBorderColor","indicatorBackgroundColor","indicatorSizeMedium","indicatorSizeLarge","useRootBaseClassName","position","display","cursor","verticalAlign","color","colorNeutralForeground3","style","selector","useRootStyles","unchecked","colorNeutralForeground2","colorNeutralStrokeAccessibleHover","colorNeutralForeground1","colorNeutralStrokeAccessiblePressed","checked","colorCompoundBrandBackground","colorNeutralForegroundInverted","colorCompoundBrandBackgroundHover","colorCompoundBrandBackgroundPressed","mixed","colorCompoundBrandStroke","colorCompoundBrandForeground1","colorCompoundBrandStrokeHover","colorCompoundBrandForeground1Hover","colorCompoundBrandStrokePressed","colorCompoundBrandForeground1Pressed","disabled","colorNeutralForegroundDisabled","colorNeutralStrokeDisabled","useInputBaseClassName","boxSizing","height","margin","opacity","top","width","spacingHorizontalS","useInputStyles","before","right","after","left","large","useIndicatorBaseClassName","alignSelf","flexShrink","alignItems","justifyContent","overflow","backgroundColor","borderColor","colorNeutralStrokeAccessible","borderStyle","borderWidth","strokeWidthThin","borderRadius","borderRadiusSmall","spacingVerticalS","fill","pointerEvents","fontSize","useIndicatorStyles","circular","borderRadiusCircular","useLabelStyles","base","padding","paddingRight","spacingHorizontalXS","paddingLeft","medium","marginTop","lineHeightBase300","marginBottom","useCheckboxStyles_unstable","state","labelPosition","shape","size","rootBaseClassName","rootStyles","className","inputBaseClassName","inputStyles","indicatorBaseClassName","indicatorStyles","labelStyles"],"mappings":"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"}