{"version":3,"sources":["../src/types.ts"],"sourcesContent":["import type { MotionParam, PresenceMotion, PresenceMotionFn, PresenceDirection } from '@fluentui/react-motion';\n\n/**\n * This is a factory function that generates a motion object from variant params, e.g. duration, easing, etc.\n * The generated object defines a presence motion with `enter` and `exit` transitions.\n * This motion object is declarative, i.e. data without side effects,\n * and it is framework-independent, i.e. non-React.\n * It can be turned into a React component using `createPresenceComponent`.\n */\n// TODO: move to @fluentui/react-motion when stable\nexport type PresenceMotionCreator<MotionVariantParams extends Record<string, MotionParam> = {}> = (\n  variantParams?: MotionVariantParams,\n) => PresenceMotion;\n\n/**\n * This is a factory function that generates a motion function, which has variant params bound into it.\n * The generated motion function accepts other runtime params that aren't locked into the variant, but supplied at runtime.\n * This separation allows the variant to be defined once and reused with different runtime params which may be orthogonal to the variant params.\n * For example, a variant may define the duration and easing of a transition, which are fixed for all instances of the variant,\n * while the runtime params may give access to the target element, which is different for each instance.\n *\n * The generated motion function is also framework-independent, i.e. non-React.\n * It can be turned into a React component using `createPresenceComponent`.\n */\n// TODO: move to @fluentui/react-motion when stable\nexport type PresenceMotionFnCreator<\n  MotionVariantParams extends Record<string, MotionParam> = {},\n  MotionRuntimeParams extends Record<string, MotionParam> = {},\n> = (variantParams?: MotionVariantParams) => PresenceMotionFn<MotionRuntimeParams>;\n\n/**\n * Common duration parameters for presence motion components.\n */\nexport type PresenceDuration = {\n  /** Time (ms) for the enter transition. */\n  duration?: number;\n\n  /** Time (ms) for the exit transition. Defaults to the `duration` param for symmetry. */\n  exitDuration?: number;\n};\n\n/**\n * Common easing parameters for presence motion components.\n */\nexport type PresenceEasing = {\n  /** Easing curve for the enter transition. */\n  easing?: string;\n\n  /** Easing curve for the exit transition. Defaults to the `easing` param for symmetry. */\n  exitEasing?: string;\n};\n\n/**\n * Common delay parameters for presence motion components.\n */\nexport type PresenceDelay = {\n  /** Time (ms) to delay the enter transition. */\n  delay?: EffectTiming['delay'];\n\n  /** Time (ms) to delay the exit transition. Defaults to the `delay` param for symmetry. */\n  exitDelay?: EffectTiming['delay'];\n};\n\n/**\n * Base presence parameters combining duration, easing, and delay for motion components.\n */\nexport type BasePresenceParams = PresenceDuration & PresenceEasing & PresenceDelay;\n\n/**\n * Common opacity animation parameter for motion components.\n */\nexport type AnimateOpacity = {\n  /** Whether to animate the opacity. Defaults to `true`. */\n  animateOpacity?: boolean;\n};\n\n/**\n * Common parameters shared by all atom functions.\n */\nexport type BaseAtomParams = {\n  /** The functional direction of the motion: 'enter' or 'exit'. */\n  direction: PresenceDirection;\n  /** The duration of the motion in milliseconds. */\n  duration: number;\n  /** The easing curve for the motion. */\n  easing?: EffectTiming['easing'];\n  /** Time (ms) to delay the animation. */\n  delay?: EffectTiming['delay'];\n};\n"],"names":[],"mappings":"AA4EA;;CAEC,GACD,WASE"}