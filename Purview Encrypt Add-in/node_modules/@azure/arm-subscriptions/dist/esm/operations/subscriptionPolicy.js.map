{"version":3,"file":"subscriptionPolicy.js","sourceRoot":"","sources":["../../../src/operations/subscriptionPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { SubscriptionPolicy } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { SubscriptionClient } from \"../subscriptionClient.js\";\nimport {\n  GetTenantPolicyResponse,\n  SubscriptionPolicyListPolicyForTenantNextOptionalParams,\n  SubscriptionPolicyListPolicyForTenantOptionalParams,\n  SubscriptionPolicyListPolicyForTenantResponse,\n  PutTenantPolicyRequestProperties,\n  SubscriptionPolicyAddUpdatePolicyForTenantOptionalParams,\n  SubscriptionPolicyAddUpdatePolicyForTenantResponse,\n  SubscriptionPolicyGetPolicyForTenantOptionalParams,\n  SubscriptionPolicyGetPolicyForTenantResponse,\n  SubscriptionPolicyListPolicyForTenantNextResponse\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing SubscriptionPolicy operations. */\nexport class SubscriptionPolicyImpl implements SubscriptionPolicy {\n  private readonly client: SubscriptionClient;\n\n  /**\n   * Initialize a new instance of the class SubscriptionPolicy class.\n   * @param client Reference to the service client\n   */\n  constructor(client: SubscriptionClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get the subscription tenant policy for the user's tenant.\n   * @param options The options parameters.\n   */\n  public listPolicyForTenant(\n    options?: SubscriptionPolicyListPolicyForTenantOptionalParams\n  ): PagedAsyncIterableIterator<GetTenantPolicyResponse> {\n    const iter = this.listPolicyForTenantPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPolicyForTenantPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPolicyForTenantPagingPage(\n    options?: SubscriptionPolicyListPolicyForTenantOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<GetTenantPolicyResponse[]> {\n    let result: SubscriptionPolicyListPolicyForTenantResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listPolicyForTenant(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listPolicyForTenantNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPolicyForTenantPagingAll(\n    options?: SubscriptionPolicyListPolicyForTenantOptionalParams\n  ): AsyncIterableIterator<GetTenantPolicyResponse> {\n    for await (const page of this.listPolicyForTenantPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Create or Update Subscription tenant policy for user's tenant.\n   * @param body Put tenant policy request properties.\n   * @param options The options parameters.\n   */\n  addUpdatePolicyForTenant(\n    body: PutTenantPolicyRequestProperties,\n    options?: SubscriptionPolicyAddUpdatePolicyForTenantOptionalParams\n  ): Promise<SubscriptionPolicyAddUpdatePolicyForTenantResponse> {\n    return this.client.sendOperationRequest(\n      { body, options },\n      addUpdatePolicyForTenantOperationSpec\n    );\n  }\n\n  /**\n   * Get the subscription tenant policy for the user's tenant.\n   * @param options The options parameters.\n   */\n  getPolicyForTenant(\n    options?: SubscriptionPolicyGetPolicyForTenantOptionalParams\n  ): Promise<SubscriptionPolicyGetPolicyForTenantResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      getPolicyForTenantOperationSpec\n    );\n  }\n\n  /**\n   * Get the subscription tenant policy for the user's tenant.\n   * @param options The options parameters.\n   */\n  private _listPolicyForTenant(\n    options?: SubscriptionPolicyListPolicyForTenantOptionalParams\n  ): Promise<SubscriptionPolicyListPolicyForTenantResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listPolicyForTenantOperationSpec\n    );\n  }\n\n  /**\n   * ListPolicyForTenantNext\n   * @param nextLink The nextLink from the previous successful call to the ListPolicyForTenant method.\n   * @param options The options parameters.\n   */\n  private _listPolicyForTenantNext(\n    nextLink: string,\n    options?: SubscriptionPolicyListPolicyForTenantNextOptionalParams\n  ): Promise<SubscriptionPolicyListPolicyForTenantNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listPolicyForTenantNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst addUpdatePolicyForTenantOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.Subscription/policies/default\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GetTenantPolicyResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseBody\n    }\n  },\n  requestBody: Parameters.body3,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getPolicyForTenantOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.Subscription/policies/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GetTenantPolicyResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseBody\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listPolicyForTenantOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.Subscription/policies\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GetTenantPolicyListResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseBody\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listPolicyForTenantNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GetTenantPolicyListResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseBody\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}