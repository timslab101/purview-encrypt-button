{"version":3,"file":"subscriptions.js","sourceRoot":"","sources":["../../../src/operations/subscriptions.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { Subscriptions } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { SubscriptionClient } from \"../subscriptionClient.js\";\nimport {\n  Location,\n  SubscriptionsListLocationsOptionalParams,\n  SubscriptionsListLocationsResponse,\n  Subscription,\n  SubscriptionsListNextOptionalParams,\n  SubscriptionsListOptionalParams,\n  SubscriptionsListResponse,\n  SubscriptionsGetOptionalParams,\n  SubscriptionsGetResponse,\n  SubscriptionsListNextResponse\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Subscriptions operations. */\nexport class SubscriptionsImpl implements Subscriptions {\n  private readonly client: SubscriptionClient;\n\n  /**\n   * Initialize a new instance of the class Subscriptions class.\n   * @param client Reference to the service client\n   */\n  constructor(client: SubscriptionClient) {\n    this.client = client;\n  }\n\n  /**\n   * This operation provides all the locations that are available for resource providers; however, each\n   * resource provider may support a subset of this list.\n   * @param subscriptionId The ID of the target subscription.\n   * @param options The options parameters.\n   */\n  public listLocations(\n    subscriptionId: string,\n    options?: SubscriptionsListLocationsOptionalParams\n  ): PagedAsyncIterableIterator<Location> {\n    const iter = this.listLocationsPagingAll(subscriptionId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listLocationsPagingPage(subscriptionId, options, settings);\n      }\n    };\n  }\n\n  private async *listLocationsPagingPage(\n    subscriptionId: string,\n    options?: SubscriptionsListLocationsOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<Location[]> {\n    let result: SubscriptionsListLocationsResponse;\n    result = await this._listLocations(subscriptionId, options);\n    yield result.value || [];\n  }\n\n  private async *listLocationsPagingAll(\n    subscriptionId: string,\n    options?: SubscriptionsListLocationsOptionalParams\n  ): AsyncIterableIterator<Location> {\n    for await (const page of this.listLocationsPagingPage(\n      subscriptionId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets all subscriptions for a tenant.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: SubscriptionsListOptionalParams\n  ): PagedAsyncIterableIterator<Subscription> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: SubscriptionsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<Subscription[]> {\n    let result: SubscriptionsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: SubscriptionsListOptionalParams\n  ): AsyncIterableIterator<Subscription> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation provides all the locations that are available for resource providers; however, each\n   * resource provider may support a subset of this list.\n   * @param subscriptionId The ID of the target subscription.\n   * @param options The options parameters.\n   */\n  private _listLocations(\n    subscriptionId: string,\n    options?: SubscriptionsListLocationsOptionalParams\n  ): Promise<SubscriptionsListLocationsResponse> {\n    return this.client.sendOperationRequest(\n      { subscriptionId, options },\n      listLocationsOperationSpec\n    );\n  }\n\n  /**\n   * Gets details about a specified subscription.\n   * @param subscriptionId The ID of the target subscription.\n   * @param options The options parameters.\n   */\n  get(\n    subscriptionId: string,\n    options?: SubscriptionsGetOptionalParams\n  ): Promise<SubscriptionsGetResponse> {\n    return this.client.sendOperationRequest(\n      { subscriptionId, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Gets all subscriptions for a tenant.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: SubscriptionsListOptionalParams\n  ): Promise<SubscriptionsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: SubscriptionsListNextOptionalParams\n  ): Promise<SubscriptionsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listLocationsOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/locations\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.LocationListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Subscription\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SubscriptionListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SubscriptionListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}