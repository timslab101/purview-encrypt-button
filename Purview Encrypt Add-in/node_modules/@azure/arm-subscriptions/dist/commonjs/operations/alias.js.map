{"version":3,"file":"alias.js","sourceRoot":"","sources":["../../../src/operations/alias.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { Alias } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { SubscriptionClient } from \"../subscriptionClient.js\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl.js\";\nimport {\n  PutAliasRequest,\n  AliasCreateOptionalParams,\n  AliasCreateResponse,\n  AliasGetOptionalParams,\n  AliasGetResponse,\n  AliasDeleteOptionalParams,\n  AliasListOptionalParams,\n  AliasListResponse\n} from \"../models/index.js\";\n\n/** Class containing Alias operations. */\nexport class AliasImpl implements Alias {\n  private readonly client: SubscriptionClient;\n\n  /**\n   * Initialize a new instance of the class Alias class.\n   * @param client Reference to the service client\n   */\n  constructor(client: SubscriptionClient) {\n    this.client = client;\n  }\n\n  /**\n   * Create Alias Subscription.\n   * @param aliasName AliasName is the name for the subscription creation request. Note that this is not\n   *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for\n   *                  subscription creation.\n   * @param body The parameters required to create a new subscription.\n   * @param options The options parameters.\n   */\n  async beginCreate(\n    aliasName: string,\n    body: PutAliasRequest,\n    options?: AliasCreateOptionalParams\n  ): Promise<\n    PollerLike<PollOperationState<AliasCreateResponse>, AliasCreateResponse>\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<AliasCreateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { aliasName, body, options },\n      createOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Create Alias Subscription.\n   * @param aliasName AliasName is the name for the subscription creation request. Note that this is not\n   *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for\n   *                  subscription creation.\n   * @param body The parameters required to create a new subscription.\n   * @param options The options parameters.\n   */\n  async beginCreateAndWait(\n    aliasName: string,\n    body: PutAliasRequest,\n    options?: AliasCreateOptionalParams\n  ): Promise<AliasCreateResponse> {\n    const poller = await this.beginCreate(aliasName, body, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Get Alias Subscription.\n   * @param aliasName AliasName is the name for the subscription creation request. Note that this is not\n   *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for\n   *                  subscription creation.\n   * @param options The options parameters.\n   */\n  get(\n    aliasName: string,\n    options?: AliasGetOptionalParams\n  ): Promise<AliasGetResponse> {\n    return this.client.sendOperationRequest(\n      { aliasName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Delete Alias.\n   * @param aliasName AliasName is the name for the subscription creation request. Note that this is not\n   *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for\n   *                  subscription creation.\n   * @param options The options parameters.\n   */\n  delete(\n    aliasName: string,\n    options?: AliasDeleteOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { aliasName, options },\n      deleteOperationSpec\n    );\n  }\n\n  /**\n   * List Alias Subscription.\n   * @param options The options parameters.\n   */\n  list(options?: AliasListOptionalParams): Promise<AliasListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst createOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.Subscription/aliases/{aliasName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SubscriptionAliasResponse\n    },\n    201: {\n      bodyMapper: Mappers.SubscriptionAliasResponse\n    },\n    202: {\n      bodyMapper: Mappers.SubscriptionAliasResponse\n    },\n    204: {\n      bodyMapper: Mappers.SubscriptionAliasResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseBody\n    }\n  },\n  requestBody: Parameters.body2,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host, Parameters.aliasName],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.Subscription/aliases/{aliasName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SubscriptionAliasResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseBody\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host, Parameters.aliasName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.Subscription/aliases/{aliasName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponseBody\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host, Parameters.aliasName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.Subscription/aliases\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SubscriptionAliasListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseBody\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}