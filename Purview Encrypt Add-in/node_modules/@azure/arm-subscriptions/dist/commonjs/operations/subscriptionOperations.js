"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionOperationsImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
const core_lro_1 = require("@azure/core-lro");
const lroImpl_js_1 = require("../lroImpl.js");
/** Class containing SubscriptionOperations operations. */
class SubscriptionOperationsImpl {
    client;
    /**
     * Initialize a new instance of the class SubscriptionOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * The operation to cancel a subscription
     * @param subscriptionId Subscription Id.
     * @param options The options parameters.
     */
    cancel(subscriptionId, options) {
        return this.client.sendOperationRequest({ subscriptionId, options }, cancelOperationSpec);
    }
    /**
     * The operation to rename a subscription
     * @param subscriptionId Subscription Id.
     * @param body Subscription Name
     * @param options The options parameters.
     */
    rename(subscriptionId, body, options) {
        return this.client.sendOperationRequest({ subscriptionId, body, options }, renameOperationSpec);
    }
    /**
     * The operation to enable a subscription
     * @param subscriptionId Subscription Id.
     * @param options The options parameters.
     */
    enable(subscriptionId, options) {
        return this.client.sendOperationRequest({ subscriptionId, options }, enableOperationSpec);
    }
    /**
     * Accept subscription ownership.
     * @param subscriptionId Subscription Id.
     * @param body The parameters required to accept subscription ownership.
     * @param options The options parameters.
     */
    async beginAcceptOwnership(subscriptionId, body, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperation = async (args, spec) => {
            let currentRawResponse = undefined;
            const providedCallback = args.options?.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback?.(rawResponse, flatResponse);
            };
            const updatedArgs = {
                ...args,
                options: {
                    ...args.options,
                    onResponse: callback
                }
            };
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = new lroImpl_js_1.LroImpl(sendOperation, { subscriptionId, body, options }, acceptOwnershipOperationSpec);
        const poller = new core_lro_1.LroEngine(lro, {
            resumeFrom: options?.resumeFrom,
            intervalInMs: options?.updateIntervalInMs
        });
        await poller.poll();
        return poller;
    }
    /**
     * Accept subscription ownership.
     * @param subscriptionId Subscription Id.
     * @param body The parameters required to accept subscription ownership.
     * @param options The options parameters.
     */
    async beginAcceptOwnershipAndWait(subscriptionId, body, options) {
        const poller = await this.beginAcceptOwnership(subscriptionId, body, options);
        return poller.pollUntilDone();
    }
    /**
     * Accept subscription ownership status.
     * @param subscriptionId Subscription Id.
     * @param options The options parameters.
     */
    acceptOwnershipStatus(subscriptionId, options) {
        return this.client.sendOperationRequest({ subscriptionId, options }, acceptOwnershipStatusOperationSpec);
    }
}
exports.SubscriptionOperationsImpl = SubscriptionOperationsImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const cancelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/cancel",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CanceledSubscriptionId
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const renameOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/rename",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.RenamedSubscriptionId
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    requestBody: Parameters.body,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const enableOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/enable",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.EnabledSubscriptionId
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const acceptOwnershipOperationSpec = {
    path: "/providers/Microsoft.Subscription/subscriptions/{subscriptionId}/acceptOwnership",
    httpMethod: "POST",
    responses: {
        200: {
            headersMapper: Mappers.SubscriptionAcceptOwnershipHeaders
        },
        201: {
            headersMapper: Mappers.SubscriptionAcceptOwnershipHeaders
        },
        202: {
            headersMapper: Mappers.SubscriptionAcceptOwnershipHeaders
        },
        204: {
            headersMapper: Mappers.SubscriptionAcceptOwnershipHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    requestBody: Parameters.body1,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const acceptOwnershipStatusOperationSpec = {
    path: "/providers/Microsoft.Subscription/subscriptions/{subscriptionId}/acceptOwnershipStatus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AcceptOwnershipStatusResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=subscriptionOperations.js.map