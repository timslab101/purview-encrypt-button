"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AliasImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
const core_lro_1 = require("@azure/core-lro");
const lroImpl_js_1 = require("../lroImpl.js");
/** Class containing Alias operations. */
class AliasImpl {
    client;
    /**
     * Initialize a new instance of the class Alias class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Create Alias Subscription.
     * @param aliasName AliasName is the name for the subscription creation request. Note that this is not
     *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for
     *                  subscription creation.
     * @param body The parameters required to create a new subscription.
     * @param options The options parameters.
     */
    async beginCreate(aliasName, body, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperation = async (args, spec) => {
            let currentRawResponse = undefined;
            const providedCallback = args.options?.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback?.(rawResponse, flatResponse);
            };
            const updatedArgs = {
                ...args,
                options: {
                    ...args.options,
                    onResponse: callback
                }
            };
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = new lroImpl_js_1.LroImpl(sendOperation, { aliasName, body, options }, createOperationSpec);
        const poller = new core_lro_1.LroEngine(lro, {
            resumeFrom: options?.resumeFrom,
            intervalInMs: options?.updateIntervalInMs
        });
        await poller.poll();
        return poller;
    }
    /**
     * Create Alias Subscription.
     * @param aliasName AliasName is the name for the subscription creation request. Note that this is not
     *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for
     *                  subscription creation.
     * @param body The parameters required to create a new subscription.
     * @param options The options parameters.
     */
    async beginCreateAndWait(aliasName, body, options) {
        const poller = await this.beginCreate(aliasName, body, options);
        return poller.pollUntilDone();
    }
    /**
     * Get Alias Subscription.
     * @param aliasName AliasName is the name for the subscription creation request. Note that this is not
     *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for
     *                  subscription creation.
     * @param options The options parameters.
     */
    get(aliasName, options) {
        return this.client.sendOperationRequest({ aliasName, options }, getOperationSpec);
    }
    /**
     * Delete Alias.
     * @param aliasName AliasName is the name for the subscription creation request. Note that this is not
     *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for
     *                  subscription creation.
     * @param options The options parameters.
     */
    delete(aliasName, options) {
        return this.client.sendOperationRequest({ aliasName, options }, deleteOperationSpec);
    }
    /**
     * List Alias Subscription.
     * @param options The options parameters.
     */
    list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
}
exports.AliasImpl = AliasImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/providers/Microsoft.Subscription/aliases/{aliasName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.SubscriptionAliasResponse
        },
        201: {
            bodyMapper: Mappers.SubscriptionAliasResponse
        },
        202: {
            bodyMapper: Mappers.SubscriptionAliasResponse
        },
        204: {
            bodyMapper: Mappers.SubscriptionAliasResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    requestBody: Parameters.body2,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.aliasName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/providers/Microsoft.Subscription/aliases/{aliasName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SubscriptionAliasResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.aliasName],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteOperationSpec = {
    path: "/providers/Microsoft.Subscription/aliases/{aliasName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.aliasName],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/providers/Microsoft.Subscription/aliases",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SubscriptionAliasListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=alias.js.map