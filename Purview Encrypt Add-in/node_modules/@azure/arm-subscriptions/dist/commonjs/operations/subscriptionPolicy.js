"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionPolicyImpl = void 0;
const tslib_1 = require("tslib");
const pagingHelper_js_1 = require("../pagingHelper.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/// <reference lib="esnext.asynciterable" />
/** Class containing SubscriptionPolicy operations. */
class SubscriptionPolicyImpl {
    client;
    /**
     * Initialize a new instance of the class SubscriptionPolicy class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the subscription tenant policy for the user's tenant.
     * @param options The options parameters.
     */
    listPolicyForTenant(options) {
        const iter = this.listPolicyForTenantPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings?.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPolicyForTenantPagingPage(options, settings);
            }
        };
    }
    async *listPolicyForTenantPagingPage(options, settings) {
        let result;
        let continuationToken = settings?.continuationToken;
        if (!continuationToken) {
            result = await this._listPolicyForTenant(options);
            let page = result.value || [];
            continuationToken = result.nextLink;
            (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
            yield page;
        }
        while (continuationToken) {
            result = await this._listPolicyForTenantNext(continuationToken, options);
            continuationToken = result.nextLink;
            let page = result.value || [];
            (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
            yield page;
        }
    }
    async *listPolicyForTenantPagingAll(options) {
        for await (const page of this.listPolicyForTenantPagingPage(options)) {
            yield* page;
        }
    }
    /**
     * Create or Update Subscription tenant policy for user's tenant.
     * @param body Put tenant policy request properties.
     * @param options The options parameters.
     */
    addUpdatePolicyForTenant(body, options) {
        return this.client.sendOperationRequest({ body, options }, addUpdatePolicyForTenantOperationSpec);
    }
    /**
     * Get the subscription tenant policy for the user's tenant.
     * @param options The options parameters.
     */
    getPolicyForTenant(options) {
        return this.client.sendOperationRequest({ options }, getPolicyForTenantOperationSpec);
    }
    /**
     * Get the subscription tenant policy for the user's tenant.
     * @param options The options parameters.
     */
    _listPolicyForTenant(options) {
        return this.client.sendOperationRequest({ options }, listPolicyForTenantOperationSpec);
    }
    /**
     * ListPolicyForTenantNext
     * @param nextLink The nextLink from the previous successful call to the ListPolicyForTenant method.
     * @param options The options parameters.
     */
    _listPolicyForTenantNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listPolicyForTenantNextOperationSpec);
    }
}
exports.SubscriptionPolicyImpl = SubscriptionPolicyImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const addUpdatePolicyForTenantOperationSpec = {
    path: "/providers/Microsoft.Subscription/policies/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.GetTenantPolicyResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    requestBody: Parameters.body3,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getPolicyForTenantOperationSpec = {
    path: "/providers/Microsoft.Subscription/policies/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GetTenantPolicyResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
const listPolicyForTenantOperationSpec = {
    path: "/providers/Microsoft.Subscription/policies",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GetTenantPolicyListResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
const listPolicyForTenantNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GetTenantPolicyListResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=subscriptionPolicy.js.map