{"version":3,"file":"subscriptionOperations.js","sourceRoot":"","sources":["../../../src/operations/subscriptionOperations.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { SubscriptionOperations } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { SubscriptionClient } from \"../subscriptionClient.js\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl.js\";\nimport {\n  SubscriptionCancelOptionalParams,\n  SubscriptionCancelResponse,\n  SubscriptionName,\n  SubscriptionRenameOptionalParams,\n  SubscriptionRenameResponse,\n  SubscriptionEnableOptionalParams,\n  SubscriptionEnableResponse,\n  AcceptOwnershipRequest,\n  SubscriptionAcceptOwnershipOptionalParams,\n  SubscriptionAcceptOwnershipResponse,\n  SubscriptionAcceptOwnershipStatusOptionalParams,\n  SubscriptionAcceptOwnershipStatusResponse\n} from \"../models/index.js\";\n\n/** Class containing SubscriptionOperations operations. */\nexport class SubscriptionOperationsImpl implements SubscriptionOperations {\n  private readonly client: SubscriptionClient;\n\n  /**\n   * Initialize a new instance of the class SubscriptionOperations class.\n   * @param client Reference to the service client\n   */\n  constructor(client: SubscriptionClient) {\n    this.client = client;\n  }\n\n  /**\n   * The operation to cancel a subscription\n   * @param subscriptionId Subscription Id.\n   * @param options The options parameters.\n   */\n  cancel(\n    subscriptionId: string,\n    options?: SubscriptionCancelOptionalParams\n  ): Promise<SubscriptionCancelResponse> {\n    return this.client.sendOperationRequest(\n      { subscriptionId, options },\n      cancelOperationSpec\n    );\n  }\n\n  /**\n   * The operation to rename a subscription\n   * @param subscriptionId Subscription Id.\n   * @param body Subscription Name\n   * @param options The options parameters.\n   */\n  rename(\n    subscriptionId: string,\n    body: SubscriptionName,\n    options?: SubscriptionRenameOptionalParams\n  ): Promise<SubscriptionRenameResponse> {\n    return this.client.sendOperationRequest(\n      { subscriptionId, body, options },\n      renameOperationSpec\n    );\n  }\n\n  /**\n   * The operation to enable a subscription\n   * @param subscriptionId Subscription Id.\n   * @param options The options parameters.\n   */\n  enable(\n    subscriptionId: string,\n    options?: SubscriptionEnableOptionalParams\n  ): Promise<SubscriptionEnableResponse> {\n    return this.client.sendOperationRequest(\n      { subscriptionId, options },\n      enableOperationSpec\n    );\n  }\n\n  /**\n   * Accept subscription ownership.\n   * @param subscriptionId Subscription Id.\n   * @param body The parameters required to accept subscription ownership.\n   * @param options The options parameters.\n   */\n  async beginAcceptOwnership(\n    subscriptionId: string,\n    body: AcceptOwnershipRequest,\n    options?: SubscriptionAcceptOwnershipOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<SubscriptionAcceptOwnershipResponse>,\n      SubscriptionAcceptOwnershipResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SubscriptionAcceptOwnershipResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { subscriptionId, body, options },\n      acceptOwnershipOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Accept subscription ownership.\n   * @param subscriptionId Subscription Id.\n   * @param body The parameters required to accept subscription ownership.\n   * @param options The options parameters.\n   */\n  async beginAcceptOwnershipAndWait(\n    subscriptionId: string,\n    body: AcceptOwnershipRequest,\n    options?: SubscriptionAcceptOwnershipOptionalParams\n  ): Promise<SubscriptionAcceptOwnershipResponse> {\n    const poller = await this.beginAcceptOwnership(\n      subscriptionId,\n      body,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Accept subscription ownership status.\n   * @param subscriptionId Subscription Id.\n   * @param options The options parameters.\n   */\n  acceptOwnershipStatus(\n    subscriptionId: string,\n    options?: SubscriptionAcceptOwnershipStatusOptionalParams\n  ): Promise<SubscriptionAcceptOwnershipStatusResponse> {\n    return this.client.sendOperationRequest(\n      { subscriptionId, options },\n      acceptOwnershipStatusOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst cancelOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/cancel\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CanceledSubscriptionId\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseBody\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst renameOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/rename\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RenamedSubscriptionId\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseBody\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst enableOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/enable\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EnabledSubscriptionId\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseBody\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst acceptOwnershipOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.Subscription/subscriptions/{subscriptionId}/acceptOwnership\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      headersMapper: Mappers.SubscriptionAcceptOwnershipHeaders\n    },\n    201: {\n      headersMapper: Mappers.SubscriptionAcceptOwnershipHeaders\n    },\n    202: {\n      headersMapper: Mappers.SubscriptionAcceptOwnershipHeaders\n    },\n    204: {\n      headersMapper: Mappers.SubscriptionAcceptOwnershipHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseBody\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst acceptOwnershipStatusOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.Subscription/subscriptions/{subscriptionId}/acceptOwnershipStatus\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AcceptOwnershipStatusResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseBody\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}